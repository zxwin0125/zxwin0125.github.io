"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4808],{3386:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,n]of i)e[l]=n;return e}},760:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>t,data:()=>r});var n=e(6254);const a={},t=(0,e(3386).A)(a,[["render",function(l,i){const e=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[i[7]||(i[7]=(0,n.Fv)('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><ul><li>我是在去年的年初开始接手花呗账单业务，前期做过几个小需求，写代码的过程十分痛苦 <ul><li>没有模型设计</li><li>模块之间耦合严重</li><li>面条代码满屏飞....</li></ul></li><li>想着接下来自己都要维护这一坨坨的代码，实在无法忍受，便萌生了重构的想法 <ul><li>但由于账单业务的了解不够深入，一直没有开始重构事项</li><li>与此同时，也在找各种关于花呗尤其是贷后相关的资料，增加对业务的了解深度</li></ul></li><li>但是如果按部就班，或许现在还没有将花呗账单的前端应用重构完毕，回顾下来，主要得益于两个契机： <ul><li>业务上： <ul><li>启动了「花呗账单单机构」需求，其实更多是面向 BFF 链路的改动，跟前端应用侧关系微乎其微</li><li>但对业务侧而言，是一个全新的链路，而且需求面向监管合规，时间要求上又没有那么紧张。所以就借助这个需求顺水推舟...</li></ul></li><li>技术上： <ul><li>皓默（老手，对业务来龙去脉都很了解的人）在项目中搞了个针对核心模块 Domain 抽象的 PR，给了我重构事项上一些设计灵感</li></ul></li></ul></li><li>最后，真正让我迈出重构那一步的，是由于当时感觉虽然看了挺多资料介绍花呗贷后相关业务，但总体上还是「浮于表面」，这个问题主要在与后端合作时非常明显： <ul><li>被问及一个问题时，没法直接回答上来，得去翻代码，显得特别的「不专业」，更别提得说服自己「我是账单前端的 owner」了</li></ul></li><li>于是...本着「我得把账单业务彻底啃下来」的心态，就开始了对账单前端项目的重构工作</li><li>最终，从 2 月底开始，到 9 月初重构的第一版上线，历时 5 个多月，再从 9 月初 到 11 月中旬，又花了 2 个多月，整体重构的开发工作才算完成，总共 7 个月时间，过程比较坎坷，当然，以下也不全是重构过程中的实践，部分是重构完成后复盘发现做的不够好的地方，将做的好的、做的不够的总结出来</li></ul><h2 id="一、重构原则" tabindex="-1"><a class="header-anchor" href="#一、重构原则"><span>一、重构原则</span></a></h2><h3 id="_1-什么是重构" tabindex="-1"><a class="header-anchor" href="#_1-什么是重构"><span>1. 什么是重构</span></a></h3><blockquote><p>重构是对软件内部结构的一种调整，目的是不影响软件功能的前提下，提高其可理解性，降低其修改成本 ——《重构，改善既有代码的设计》</p></blockquote><h3 id="_2-为什么重构" tabindex="-1"><a class="header-anchor" href="#_2-为什么重构"><span>2. 为什么重构</span></a></h3><blockquote><p>通常是一件低 ROI 的事情</p><ul><li>你需要投入的时间和精力与回报相比，往往是不成正比的，这一点需要再三斟酌</li><li>如果看到这里时，对你的重构计划产生了动摇，那么可以先取消掉这个计划，直至你做好了相关准备</li><li>当然，我也会以自身的实践为例，讲讲我的心路历程，为什么我愿意去做这件「低 ROI」 的事情</li></ul></blockquote><ul><li>重构不是目的而是手段，我们在决定重构前要认真思考为什么要重构，即，想清楚价值与成本： <ul><li>价值：重构后能给业务、团队、项目、个人带来什么增益？</li><li>成本：值得我花多大的精力来这么做？</li></ul></li><li>从价值角度，我根据自身的实践经验给出一些量化的指标，仅供参考： <ul><li>业务：按照目标架构重构后，是否能够支撑业务 1 到 2 年的快速迭代？如果不能，请重新审视这次重构的价值</li><li>团队：重构后是否更有利于团队协作？ <ol><li>相比之前，是否能改更少代码实现相同功能</li><li>即使参与者对业务不熟，也不容易出 bug</li><li>是否有足够的<a href="http://lanlingzi.cn/post/technical/2019/0609_comment/" target="_blank" rel="noopener noreferrer"><strong>有效注释</strong></a>来帮助参与者理解项目代码</li></ol></li><li>项目：更稳定、干净的依赖</li><li>个人：作为 owner，是项目的第一责任人。通过重构给业务、团队带来增益的同时，一定程度上也在给自己减负（时间、精力的投入，心智负担）</li></ul></li><li>从「个人」角度，我更多的考量是<strong>通过重构得到更深层的理解</strong></li></ul><h3 id="_3-什么时候重构" tabindex="-1"><a class="header-anchor" href="#_3-什么时候重构"><span>3. 什么时候重构</span></a></h3><ul><li>这更依赖当事人个人的判断，但仍有可参考的指引： <ul><li>代码变更非常困难且容易引入 bug</li><li>充满面条代码，没有合理的分层</li><li>代码无法进行单元测试</li></ul></li><li>以花呗账单中的 case 为例，项目迭代了近 5 年，代码中充斥着各种坏味道：</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066137-2489dd44-41c5-4720-919f-d30b43416080.png" alt="账单首页状态和对应文案的流转" tabindex="0" loading="lazy"><figcaption>账单首页状态和对应文案的流转</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584065808-901f7eb1-e63f-4518-bc79-cd7a6a4ef5cb.png" alt="月账单页状态和对应文案的流转" tabindex="0" loading="lazy"><figcaption>月账单页状态和对应文案的流转</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066082-34a3e90c-2ddf-48e8-9c81-56a39e2016e9.png" alt="混乱的模块依赖" tabindex="0" loading="lazy"><figcaption>混乱的模块依赖</figcaption></figure><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584065744-7a229016-90cf-46ad-8b4f-550b42ff328e.png" alt="裸奔，没有单测" tabindex="0" loading="lazy"><figcaption>裸奔，没有单测</figcaption></figure><h2 id="二、事前准备" tabindex="-1"><a class="header-anchor" href="#二、事前准备"><span>二、事前准备</span></a></h2><blockquote><p>以接手存量业务的背景来介绍在开始重构前应该要做的哪些事情</p></blockquote><h3 id="_1-通读代码-产品功能梳理" tabindex="-1"><a class="header-anchor" href="#_1-通读代码-产品功能梳理"><span>1. 通读代码&amp;产品功能梳理</span></a></h3><ul><li>这是我们要迈出的第一步，通过这个步骤，我们可以对项目有全面的了解，功能全貌、现状；项目依赖关系、组织结构等，这在后续做重构计划时至关重要</li><li>以梳理花呗账单业务为例：</li></ul><figure><img src="https://intranetproxy.alipay.com/skylark/lark/0/2022/jpeg/254496/1670855072800-56f1dd39-3c8f-4669-a6c0-942cbe635334.jpeg" alt="画板" tabindex="0" loading="lazy"><figcaption>画板</figcaption></figure><ul><li>标记不同功能模块的重要程度</li><li>标记不同功能模块的状态、待确认项等</li></ul><h3 id="_2-抓住主要矛盾" tabindex="-1"><a class="header-anchor" href="#_2-抓住主要矛盾"><span>2. 抓住主要矛盾</span></a></h3><ul><li>通过通读和产品功能的梳理，基本上能够了解到需要治理的「重灾区」，为了保障重构工作的顺利推进及完成，还需要将「主要矛盾」拎出来作为重构的目标之一，以我对账单重构的梳理为例： <ul><li>React 技术栈</li><li>账单状态流转的面条代码</li><li>账单首页、月账单页缺少领域模型</li></ul></li></ul><h3 id="_3-做减法" tabindex="-1"><a class="header-anchor" href="#_3-做减法"><span>3. 做减法</span></a></h3><ul><li>在梳理产品功能的同时，我们需要关注<strong>哪些功能模块实际上以及下线且不会再上线</strong><ul><li>将它们标注出来，并在重构开始前把它们删除</li><li>这样一方面能降低代码整体的复杂度，也能使功能逻辑更加清晰，让我们关注在需要关注的代码片段上</li></ul></li></ul><h2 id="三、制定目标-方案" tabindex="-1"><a class="header-anchor" href="#三、制定目标-方案"><span>三、制定目标&amp;方案</span></a></h2><ul><li>通过第一个步骤，我们大致确定了重构的范围，但要将重构工作顺利推下去，我们还需要制定好目标，并通过目标驱动的方式来落实重构方案</li></ul><h3 id="_1-目标" tabindex="-1"><a class="header-anchor" href="#_1-目标"><span>1. 目标</span></a></h3><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066032-35ec0a45-279c-4f9b-854e-6174b07adfd3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>大型重构不可能「一步到位」，往往需要多人协同同时，将不同功能模块、领域分阶段推进</li><li>在目标制定上我们可以遵循 <a href="https://corporatefinanceinstitute.com/resources/management/smart-goal/" target="_blank" rel="noopener noreferrer">SMART</a> 原则</li><li>这里主要分享下可实现原则、可衡量原则： <ul><li><strong>可实现原则：</strong> 指制定的目标是可以被实现的 <ul><li>可实现有两层含义 <ul><li>一个是目标拆分与分工的合理性，即：目标的拆分会不会造成分工的混乱，可以实现多人共同协作</li><li>另一个则是指可衡量目标的合理性，是否可以被打成</li></ul></li></ul></li><li><strong>可衡量原则：</strong> 这里指的是技术侧的可衡量原则，不与任意的业务目标挂钩，一般可以分为定性和定量可衡量 <ul><li>定性可衡量难以数字化度量，但是可以显性化性质度量的目标 <ul><li>比如：「高复用度、高扩展度」，定性的目标「抽象领域模型，实现状态流转、文案的复用，同时结合工厂模式等提升其扩展度」是可以被明确判断是否打成的</li><li>定量可衡量，则很好理解，可以在上面的基础上追加「账单首页、月账单页的卡概览相关逻辑用同一领域模型承接」</li></ul></li></ul></li></ul></li></ul><h3 id="_2-方案" tabindex="-1"><a class="header-anchor" href="#_2-方案"><span>2. 方案</span></a></h3><ul><li>前端项目一般没有后端那么高的系统复杂度，因此可能不需要做各种架构图，但是通常会包含以下内容： <ul><li>分工：大型技改一般需要多人协作，合理的分工能提升整体效率 <ul><li>举例：账单技改中将账单首页和月账单页分配给同一个人处理，因为这两个页面在状态流转、状态-文案处理上高度趋同。这样做更有利于模型抽象</li><li>补充：在一些超大型项目的重构中，往往会根据领域模型设计及应用架构分层、分治设计为依据来做不同的分工管理，以保障不同的横切和纵切的诉求 <ul><li>横切：研发规约、框架规约；通用能力等</li><li>纵切：以领域为维度的划分</li></ul></li></ul></li><li>范围：合适的范围能够有效的控制项目风险以及能够激励我们持续的推进下去 <ul><li>举例：账单的一期技改聚焦在账单首页和月账单页，其他页面仅技术栈的迁移，保持现有逻辑不动</li></ul></li><li>监控项梳理：重构涉及大规模的改动，很难不出 BUG，详尽的监控可以帮助我们更早发现问题，风险更加可控</li><li>节奏：一方面管理项目风险，一方面帮助我们做更合理的范围拆分（即在一定的时间范围内，强迫我们决策什么应该做，什么不应该做），避免「无底洞」式投入</li><li>质量保障工具：「工欲善其事，必先利其器」，不必多说。好的工具集能够帮助我们提高效率的同时降低风险，这里推荐几个工具： <ul><li>bakery： <ul><li>页面 case 对比（可以利用其分组功能，组装不同场景 case）</li><li>链路仿真</li></ul></li><li>antman：提前将不同 case 的对应数据同步到 antman 并做好备注，重构时贼啦爽</li><li>单元测试</li></ul></li><li>其他： <ul><li>统一注释规范：统一的注释规范有助于你（或协作同学）更快 get 到上下文、待办事项等，这块比较开放，项目组同学统一认知即可，如：使用 TODO、FIXME 进行不同类型注释</li></ul></li></ul></li></ul><h3 id="_3-tdd" tabindex="-1"><a class="header-anchor" href="#_3-tdd"><span>3. TDD</span></a></h3><blockquote><p>「<a href="https://baike.baidu.com/item/TDD/9064369" target="_blank" rel="noopener noreferrer"><strong>TDD（Test Driven Development）</strong></a> 不是一种测试技术，它是一种分析技术、设计技术，更是一种组织所有开发活动的技术」—— Kent Beck《测试驱动开发》作者</p></blockquote><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066767-26d1b0dc-a624-4546-852b-d9dfe9bc4bf7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>TDD 单独拿出来介绍是因为它特别适合重构场景，如果把重构比做大海上航行的航母，那 TDD 就是护卫舰，我愿称它为「代码重构的银弹」</li><li>TDD 的目标是保障代码简洁可用，是实操作业中，我们可以用分而治之的方法来达成这一目标：先保障代码「可用」，进而使代码「简洁」 <ul><li>对于「代码可用」 我们可以通过代码能够<strong>顺利通过单元测试</strong>的形式来保证</li><li>而对于「简洁」则需要我们利用一些设计模式和设计原则来保障，这里不详细展开</li></ul></li><li>这里不过多的讲关于 TDD 的概念，仅分享下针对我在账单技改中的实践总结出来的一些步骤： <ol><li>定义重构过程中新抽象的类、方法，不用写具体实现，仅定义返回值</li><li>将提前梳理好的产品功能 case 翻译为测试用例</li><li>运行测试用例并保障通过</li><li>调整对应类、方法的实现</li><li>重复以上步骤</li></ol></li></ul><h2 id="四、争取关联方的支持" tabindex="-1"><a class="header-anchor" href="#四、争取关联方的支持"><span>四、争取关联方的支持</span></a></h2>',36)),(0,n.Lk)("ul",null,[i[5]||(i[5]=(0,n.Lk)("li",null,[(0,n.eW)("有了以上几步的准备，便可以安心地去争取关联方的支持了，他们包括： "),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,"PD（们）：事情的「合法」性"),(0,n.Lk)("li",null,"测试：质量的最后一堵墙"),(0,n.Lk)("li",null,"PM：排期")])],-1)),i[6]||(i[6]=(0,n.Lk)("li",null,[(0,n.eW)("这一个步骤需要我们换位思考，讲清楚重构之后对每一个「我」的价值，形成 代码治理-价值传递 的正反馈，以下代入不同角色会关心的问题类型： "),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,"PD：迭代效率；产品体验"),(0,n.Lk)("li",null,"测试：对代码质量的提升；后续测试工作量的投入"),(0,n.Lk)("li",null,"PM：重构的背景、价值；PD、测试的支持")])],-1)),(0,n.Lk)("li",null,[i[4]||(i[4]=(0,n.eW)("以上角色中，重点说服 PD、测试同学，当这两方都搞定了， PM 这一侧更多只是顺水推舟，我根据账单侧的实践经验总结了以下几点： ")),(0,n.Lk)("ul",null,[i[3]||(i[3]=(0,n.Lk)("li",null,"大型重构很多时候是无法争取到单独排期的，一般大型迭代是做重构的绝佳时期，但这种窗口可遇不可求，当没有这种契机时，我们可以按照产品规划，尽量挖掘出重构对后续事项的价值点",-1)),(0,n.Lk)("li",null,[i[1]||(i[1]=(0,n.eW)("测试、PM 在排期上往往只是配合，最重要的还是 PD 的支持（优先级等都是 PD 去 PK 的）。对于 PD，理性的价值探讨和 ")),(0,n.Lk)("strong",null,[(0,n.bF)(e,{color:"red"},{default:(0,n.k6)((()=>i[0]||(i[0]=[(0,n.eW)("刷脸")]))),_:1})]),i[2]||(i[2]=(0,n.eW)("，都是非常有必要的"))])])])]),i[8]||(i[8]=(0,n.Fv)('<h3 id="关联方的预期管理" tabindex="-1"><a class="header-anchor" href="#关联方的预期管理"><span>关联方的预期管理</span></a></h3><ul><li>大型重构期间，避免不了会对需求迭代产生或大或小的影响,这里需要提前跟 PD 沟通好，避免在双方认知不一致的情况下发生某些分歧，导致彼此信任度下降</li></ul><h2 id="五、发布前" tabindex="-1"><a class="header-anchor" href="#五、发布前"><span>五、发布前</span></a></h2><h3 id="_1-切流方案" tabindex="-1"><a class="header-anchor" href="#_1-切流方案"><span>1. 切流方案</span></a></h3><ul><li>需要包含 <strong>方式、节奏、应急手段</strong> 三个部分，以账单重构的切流方案为例：</li></ul><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066982-48ba58ad-28eb-4845-a34c-d1f907022b04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="六、回顾" tabindex="-1"><a class="header-anchor" href="#六、回顾"><span>六、回顾</span></a></h2><figure><img src="https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584067730-e840adac-34b6-41e4-9857-797f4863a9fd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>整个重构从 2 月份 到 9 月份历时 7 个月，中间遇到了很多问题无法一一向大家报告，挑其中比较困难的点： <ul><li><strong>优先级一降再降：</strong> 原计划第一版重构是在 5 月份发布，但是由于当时各种高优先级项目不断插队，导致重构的代码始终没办法推进至测试环节，期间找 PD、PM、测试 各种对焦、刷脸都争取不到测试资源，这导致整个 S1 几乎没有结果，好在 S2 抓住了一些关键的节点（业务规划、测试节奏安排等），在与 PD、PM、测试的极力争取下，把第一个重构版本推了上去</li><li><strong>持久力：</strong> 单纯的架构持续演进并不算是困难，但在当时账单重构第一个版本刚上线，整个人心力交瘁的情况下，又马上决定在架构设计层大动干戈（第二版重构几乎完全重新设计了核心模块 domain）则不是一件易事（心智负担大、工作量大）</li></ul></li><li>除此之外，在开始前、过程中也有一些担忧： <ul><li><strong>投入产出比低：</strong> 从现实角度讲，决定做重构不是一个理性的决定，它是个苦差，讲大白话就是「对我们的绩效没啥帮助」</li><li><strong>吃故障：</strong> 除了 ROI 太低外，更重要的它是一件高风险的事情，一旦出问题，还会对我们的绩效「反向帮助」，属于「吃力不讨好」</li></ul></li><li>对于这两点，也是开始前、过程中最纠结的点，但最终说服了自己，我给自己的答案是：<strong>重构更多是给自己的交代</strong></li></ul>',9))])}]]),r=JSON.parse('{"path":"/project/huabeiBillReconfiguration.html","title":"花呗账单重构总结","lang":"zh-CN","frontmatter":{"title":"花呗账单重构总结","order":2,"description":"前言 我是在去年的年初开始接手花呗账单业务，前期做过几个小需求，写代码的过程十分痛苦 没有模型设计 模块之间耦合严重 面条代码满屏飞.... 想着接下来自己都要维护这一坨坨的代码，实在无法忍受，便萌生了重构的想法 但由于账单业务的了解不够深入，一直没有开始重构事项 与此同时，也在找各种关于花呗尤其是贷后相关的资料，增加对业务的了解深度 但是如果按部就班...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/project/huabeiBillReconfiguration.html"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"花呗账单重构总结"}],["meta",{"property":"og:description","content":"前言 我是在去年的年初开始接手花呗账单业务，前期做过几个小需求，写代码的过程十分痛苦 没有模型设计 模块之间耦合严重 面条代码满屏飞.... 想着接下来自己都要维护这一坨坨的代码，实在无法忍受，便萌生了重构的想法 但由于账单业务的了解不够深入，一直没有开始重构事项 与此同时，也在找各种关于花呗尤其是贷后相关的资料，增加对业务的了解深度 但是如果按部就班..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066137-2489dd44-41c5-4720-919f-d30b43416080.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-15T08:03:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-15T08:03:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"花呗账单重构总结\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066137-2489dd44-41c5-4720-919f-d30b43416080.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584065808-901f7eb1-e63f-4518-bc79-cd7a6a4ef5cb.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066082-34a3e90c-2ddf-48e8-9c81-56a39e2016e9.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584065744-7a229016-90cf-46ad-8b4f-550b42ff328e.png\\",\\"https://intranetproxy.alipay.com/skylark/lark/0/2022/jpeg/254496/1670855072800-56f1dd39-3c8f-4669-a6c0-942cbe635334.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066032-35ec0a45-279c-4f9b-854e-6174b07adfd3.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066767-26d1b0dc-a624-4546-852b-d9dfe9bc4bf7.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584066982-48ba58ad-28eb-4845-a34c-d1f907022b04.png\\",\\"https://cdn.nlark.com/yuque/0/2024/png/22361634/1708584067730-e840adac-34b6-41e4-9857-797f4863a9fd.png\\"],\\"dateModified\\":\\"2024-12-15T08:03:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"一、重构原则","slug":"一、重构原则","link":"#一、重构原则","children":[{"level":3,"title":"1. 什么是重构","slug":"_1-什么是重构","link":"#_1-什么是重构","children":[]},{"level":3,"title":"2. 为什么重构","slug":"_2-为什么重构","link":"#_2-为什么重构","children":[]},{"level":3,"title":"3. 什么时候重构","slug":"_3-什么时候重构","link":"#_3-什么时候重构","children":[]}]},{"level":2,"title":"二、事前准备","slug":"二、事前准备","link":"#二、事前准备","children":[{"level":3,"title":"1. 通读代码&产品功能梳理","slug":"_1-通读代码-产品功能梳理","link":"#_1-通读代码-产品功能梳理","children":[]},{"level":3,"title":"2. 抓住主要矛盾","slug":"_2-抓住主要矛盾","link":"#_2-抓住主要矛盾","children":[]},{"level":3,"title":"3. 做减法","slug":"_3-做减法","link":"#_3-做减法","children":[]}]},{"level":2,"title":"三、制定目标&方案","slug":"三、制定目标-方案","link":"#三、制定目标-方案","children":[{"level":3,"title":"1. 目标","slug":"_1-目标","link":"#_1-目标","children":[]},{"level":3,"title":"2. 方案","slug":"_2-方案","link":"#_2-方案","children":[]},{"level":3,"title":"3. TDD","slug":"_3-tdd","link":"#_3-tdd","children":[]}]},{"level":2,"title":"四、争取关联方的支持","slug":"四、争取关联方的支持","link":"#四、争取关联方的支持","children":[{"level":3,"title":"关联方的预期管理","slug":"关联方的预期管理","link":"#关联方的预期管理","children":[]}]},{"level":2,"title":"五、发布前","slug":"五、发布前","link":"#五、发布前","children":[{"level":3,"title":"1. 切流方案","slug":"_1-切流方案","link":"#_1-切流方案","children":[]}]},{"level":2,"title":"六、回顾","slug":"六、回顾","link":"#六、回顾","children":[]}],"git":{"createdTime":1734249822000,"updatedTime":1734249822000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":1}]},"readingTime":{"minutes":12.93,"words":3880},"filePathRelative":"project/huabeiBillReconfiguration.md","localizedDate":"2024年12月15日","excerpt":"<h2>前言</h2>\\n<ul>\\n<li>我是在去年的年初开始接手花呗账单业务，前期做过几个小需求，写代码的过程十分痛苦\\n<ul>\\n<li>没有模型设计</li>\\n<li>模块之间耦合严重</li>\\n<li>面条代码满屏飞....</li>\\n</ul>\\n</li>\\n<li>想着接下来自己都要维护这一坨坨的代码，实在无法忍受，便萌生了重构的想法\\n<ul>\\n<li>但由于账单业务的了解不够深入，一直没有开始重构事项</li>\\n<li>与此同时，也在找各种关于花呗尤其是贷后相关的资料，增加对业务的了解深度</li>\\n</ul>\\n</li>\\n<li>但是如果按部就班，或许现在还没有将花呗账单的前端应用重构完毕，回顾下来，主要得益于两个契机：\\n<ul>\\n<li>业务上：\\n<ul>\\n<li>启动了「花呗账单单机构」需求，其实更多是面向 BFF 链路的改动，跟前端应用侧关系微乎其微</li>\\n<li>但对业务侧而言，是一个全新的链路，而且需求面向监管合规，时间要求上又没有那么紧张。所以就借助这个需求顺水推舟...</li>\\n</ul>\\n</li>\\n<li>技术上：\\n<ul>\\n<li>皓默（老手，对业务来龙去脉都很了解的人）在项目中搞了个针对核心模块 Domain 抽象的 PR，给了我重构事项上一些设计灵感</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>最后，真正让我迈出重构那一步的，是由于当时感觉虽然看了挺多资料介绍花呗贷后相关业务，但总体上还是「浮于表面」，这个问题主要在与后端合作时非常明显：\\n<ul>\\n<li>被问及一个问题时，没法直接回答上来，得去翻代码，显得特别的「不专业」，更别提得说服自己「我是账单前端的 owner」了</li>\\n</ul>\\n</li>\\n<li>于是...本着「我得把账单业务彻底啃下来」的心态，就开始了对账单前端项目的重构工作</li>\\n<li>最终，从 2 月底开始，到 9 月初重构的第一版上线，历时 5 个多月，再从 9 月初 到 11 月中旬，又花了 2 个多月，整体重构的开发工作才算完成，总共 7 个月时间，过程比较坎坷，当然，以下也不全是重构过程中的实践，部分是重构完成后复盘发现做的不够好的地方，将做的好的、做的不够的总结出来</li>\\n</ul>","autoDesc":true}')}}]);