"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[4506],{3386:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},9066:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var n=a(6254);const e={},l=(0,a(3386).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h2 id="什么是自动化构建" tabindex="-1"><a class="header-anchor" href="#什么是自动化构建"><span>什么是自动化构建</span></a></h2><blockquote><p>重复的工作都应自动化</p></blockquote><ul><li>开发行业中的自动化构建，就是把开发中写的源代码自动转换成可以在生产环境中运行的代码</li><li>一般把这个转换过程称为自动化构建工作流，作用是让开发者脱离运行环境兼容带来的种种问题，在开发阶段使用一些提高效率的语法规格和标准</li><li>典型应用场景，开发网页应用时可以使用 <ul><li>ECMAScript Next 新语法提高编码效率和代码质量</li><li>Sass 增强 css 的可编程性</li><li>模板引擎抽象页面中重复的 html</li></ul></li><li>通过自动化构建工具可以将上述不被浏览器支持的特性转换成能够直接运行的代码</li></ul><h2 id="自动化构建初体验" tabindex="-1"><a class="header-anchor" href="#自动化构建初体验"><span>自动化构建初体验</span></a></h2><blockquote><p>通过 sass 增强 css 的可编程性</p></blockquote><h3 id="浏览器使用-sass" tabindex="-1"><a class="header-anchor" href="#浏览器使用-sass"><span>浏览器使用 sass</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sass</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dev</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sass</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scss/main.scss</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> css/main.css</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样使用的话，每次转换都要执行一边代码，过于繁琐</li><li>所以要解决在项目开发阶段重复去执行的命令，可以使用 npm scripts</li></ul><h3 id="npm-scripts" tabindex="-1"><a class="header-anchor" href="#npm-scripts"><span>npm scripts</span></a></h3><ul><li>可以在 npm scripts 中定义一些与这个项目开发过程中有关的脚本命令，让这些命令跟在项目一起去维护</li><li>包装构建命令的方式就是在 package.json 中添加一个 scripts 字段：</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;sass-build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sass scss/main.scss:css/main.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>键是 script 命令，值是需要去执行的命令</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>scripts 可以自动去发现 node_modules 中的命令，这里就不需要写完整的命令，直接写名称可以</p></div><ul><li>npm scripts 也是实现自动化构建最简单的方式</li></ul><h3 id="browser-sync-启动测试服务器运行项目" tabindex="-1"><a class="header-anchor" href="#browser-sync-启动测试服务器运行项目"><span>browser-sync（启动测试服务器运行项目）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> browser-sync</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;sass-build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sass scss/main.scss:css/main.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;serve&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;browser-sync .&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行 yarn serve 启动测试服务器</li></ul><h3 id="npm-scripts-钩子机制" tabindex="-1"><a class="header-anchor" href="#npm-scripts-钩子机制"><span>npm scripts 钩子机制</span></a></h3><ul><li>想要实现项目启动前让 sass-build 工作，定义一个 preserve 命令，它会在 serve 命令执行前去执行</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;sass-build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sass scss/main.scss:css/main.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;preserve&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yarn sass-build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;serve&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;browser-sync .&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="监听-sass-文件并同时执行多个任务" tabindex="-1"><a class="header-anchor" href="#监听-sass-文件并同时执行多个任务"><span>监听 sass 文件并同时执行多个任务</span></a></h3><ul><li>为 sass 命令添加一个 <code>–watch</code> 的参数，sass 就会监听文件的变化</li><li>为 browser-sync 添加 <code>–files</code> 参数，可以让 browser-sync 启动后监听一些文件的变化，然后自动同步到浏览器，自动更新页面，可以不用手动刷新浏览器了</li><li>借助 npm-run-all 模块同时执行多个任务</li><li>安装 npm-run-all:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm-run-all</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;sass-build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sass sass/style.sass css/style.css --watch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;serve&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;browser-sync . --files </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">css/*.css</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;start&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;run-p sass-build serve&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样就借助 npm scripts 完成了一个简单的自动化构建的工作流，（启动后同时运行 serve 和 sass-build 这两个命令）</li></ul><h2 id="常用的自动化构建工具" tabindex="-1"><a class="header-anchor" href="#常用的自动化构建工具"><span>常用的自动化构建工具</span></a></h2><blockquote><p>npm scripts 确实能解决一部分的自动化构建任务，但是对于相对复杂的构建过程，npm scripts 就显得有些吃力，这时就需要更为专业的构建工具</p></blockquote><ul><li>目前市面上开发者使用最多的一些开发工具主要是 gulp ，grunt 和 fis</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>严格来说 webpack 实际上是一个模块打包工具</p></div><ul><li>这些工具都可以解决那些重复而且无聊的工作，从而实现自动化，用法上他们也都大体相同，都是先通过一些简单的代码去组织一些插件的使用，然后就可以使用这些工具执行各种重复的工作了</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>grunt 算是最早的前端构建系统了，他的插件生态非常的完善，用官方的一句话来说就是 grunt 的插件几乎可以帮你自动化的完成任何你想要做的事情</li><li>但是由于他的工作过程是基于临时文件实现的，所以说他的构建速度相对较慢</li><li>例如使用它去完成项目中 sass 文件的构建，一般会先对 sass 文件做编译操作，再去自动添加一些私有属性的前缀，最后再去压缩代码</li><li>这样一个过程当中，grunt 每一步都会有磁盘读写操作，处理的环节越多文件读写的次数也就越多，对于超大型项目来说项目文件会非常多，构建速度就会特别的慢</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>gulp 很好的解决了 grunt 当中构建速度慢的问题</li><li>因为他是基于内存实现的，也就是说对文件的处理环节都是在内存中完成的</li><li>相对于磁盘读写速度自然就快了很多</li><li>另外他默认支持同时执行多个任务，效率自然大大提高，而且他的使用方式相对于 grunt 更加直观易懂，插件生态也同样非常完善，所以说他后来居上，更受欢迎，应该是目前市面上最流行的前端构建系统了</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>fis 是百度的前端团队推出的一款构建系统，最早只是在团队内部使用，开源过后在国内快速流行，相对于前面两个构建系统这种微内核的特点 fis 更像是一种捆绑套餐</li><li>他把项目当中一些典型的需求尽可能都集成在内部了</li><li>例如在 fis 内部可以很轻松的处理资源加载，模块化开发，代码部署，甚至是性能优化</li><li>正是因为这种大而全，所以在国内很多项目中就流行开了</li></ul></div><ul><li>总体来说如果是初学者的话，可能 fis 更适合，但是如果要求灵活多变的话，gulp 和 grunt 应该是更好的选择</li></ul>',35)]))}]]),t=JSON.parse('{"path":"/knowledge/frontEnd/engineering/automatedConstruction/","title":"自动化构建介绍","lang":"zh-CN","frontmatter":{"title":"自动化构建介绍","date":"2021-03-08T00:00:00.000Z","order":1,"description":"什么是自动化构建 重复的工作都应自动化 开发行业中的自动化构建，就是把开发中写的源代码自动转换成可以在生产环境中运行的代码 一般把这个转换过程称为自动化构建工作流，作用是让开发者脱离运行环境兼容带来的种种问题，在开发阶段使用一些提高效率的语法规格和标准 典型应用场景，开发网页应用时可以使用 ECMAScript Next 新语法提高编码效率和代码质量 ...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/engineering/automatedConstruction/"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"自动化构建介绍"}],["meta",{"property":"og:description","content":"什么是自动化构建 重复的工作都应自动化 开发行业中的自动化构建，就是把开发中写的源代码自动转换成可以在生产环境中运行的代码 一般把这个转换过程称为自动化构建工作流，作用是让开发者脱离运行环境兼容带来的种种问题，在开发阶段使用一些提高效率的语法规格和标准 典型应用场景，开发网页应用时可以使用 ECMAScript Next 新语法提高编码效率和代码质量 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T02:40:36.000Z"}],["meta",{"property":"article:published_time","content":"2021-03-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T02:40:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自动化构建介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-02T02:40:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"什么是自动化构建","slug":"什么是自动化构建","link":"#什么是自动化构建","children":[]},{"level":2,"title":"自动化构建初体验","slug":"自动化构建初体验","link":"#自动化构建初体验","children":[{"level":3,"title":"浏览器使用 sass","slug":"浏览器使用-sass","link":"#浏览器使用-sass","children":[]},{"level":3,"title":"npm scripts","slug":"npm-scripts","link":"#npm-scripts","children":[]},{"level":3,"title":"browser-sync（启动测试服务器运行项目）","slug":"browser-sync-启动测试服务器运行项目","link":"#browser-sync-启动测试服务器运行项目","children":[]},{"level":3,"title":"npm scripts 钩子机制","slug":"npm-scripts-钩子机制","link":"#npm-scripts-钩子机制","children":[]},{"level":3,"title":"监听 sass 文件并同时执行多个任务","slug":"监听-sass-文件并同时执行多个任务","link":"#监听-sass-文件并同时执行多个任务","children":[]}]},{"level":2,"title":"常用的自动化构建工具","slug":"常用的自动化构建工具","link":"#常用的自动化构建工具","children":[]}],"git":{"createdTime":1733107236000,"updatedTime":1733107236000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1459},"filePathRelative":"knowledge/frontEnd/engineering/automatedConstruction/index.md","localizedDate":"2021年3月8日","excerpt":"<h2>什么是自动化构建</h2>\\n<blockquote>\\n<p>重复的工作都应自动化</p>\\n</blockquote>\\n<ul>\\n<li>开发行业中的自动化构建，就是把开发中写的源代码自动转换成可以在生产环境中运行的代码</li>\\n<li>一般把这个转换过程称为自动化构建工作流，作用是让开发者脱离运行环境兼容带来的种种问题，在开发阶段使用一些提高效率的语法规格和标准</li>\\n<li>典型应用场景，开发网页应用时可以使用\\n<ul>\\n<li>ECMAScript Next 新语法提高编码效率和代码质量</li>\\n<li>Sass 增强 css 的可编程性</li>\\n<li>模板引擎抽象页面中重复的 html</li>\\n</ul>\\n</li>\\n<li>通过自动化构建工具可以将上述不被浏览器支持的特性转换成能够直接运行的代码</li>\\n</ul>","autoDesc":true}')}}]);