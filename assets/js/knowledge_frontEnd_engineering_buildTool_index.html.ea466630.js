"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5411],{3386:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,l]of i)t[e]=l;return t}},2666:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>a,data:()=>o});var l=t(6254);const n={},a=(0,t(3386).A)(n,[["render",function(e,i){return(0,l.uX)(),(0,l.CE)("div",null,i[0]||(i[0]=[(0,l.Fv)('<h2 id="模块打包工具的由来" tabindex="-1"><a class="header-anchor" href="#模块打包工具的由来"><span>模块打包工具的由来</span></a></h2><blockquote><p>模块化确实很好的解决了在复杂应用开发过程中的代码组织问题，但是随着引入模块化，又会产生新的问题</p></blockquote><h3 id="模块化问题" tabindex="-1"><a class="header-anchor" href="#模块化问题"><span>模块化问题</span></a></h3><ol><li>ES Modules 存在环境兼容问题</li></ol><ul><li>ES Modules 模块系统本身就存在环境兼容问题，尽管主流浏览器最新版本都支持这样一个特性，但是还没做到统一所有用户浏览器的使用情况</li></ul><ol start="2"><li>模块文件过多，网络请求频繁</li></ol><ul><li>通过模块化的方式划分的模块文件过多，前端应用又是运行在浏览器中，每一个在应用中所需要的文件都需要从服务器中请求过来，零散的文件导致浏览器频繁发布请求，影响应用工作效率</li></ul><ol start="3"><li>所有的前端资源都需要模块化</li></ol><ul><li>前端应用开发过程中，不仅仅只有 JavaScript 的代码需要模块化，HTML、CSS等资源文件同样需要</li></ul><h3 id="方案设想" tabindex="-1"><a class="header-anchor" href="#方案设想"><span>方案设想</span></a></h3><ol><li>编译代码</li></ol><ul><li>将开发阶段编写的包含新特性的代码，直接转换为能兼容绝大多数环境的代码 —— 「解决环境兼容问题」</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>模块打包</li></ol><ul><li>将散落的模块文件再次打包一起 —— 「解决浏览器频繁请求问题」</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>多类型模块支持</li></ol><ul><li>支持不同种类的前端资源类型 —— 「解决资源模块化问题」</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="模块打包工具概要" tabindex="-1"><a class="header-anchor" href="#模块打包工具概要"><span>模块打包工具概要</span></a></h2><blockquote><p>前端领域目前有一些工具很好的解决了以上问题，其中最为主流就是 Webpack、Parcel、Rollup</p></blockquote><ul><li>以 Webpack 为例，它的核心特性就满足上面的需求 <ol><li>Webpack 作为一个模块打包工具（Module bundler），本身就可以解决模块化 JavaScript 代码打包的问题，它可以将零散的模块代码打包到同一个 JavaScript 文件中</li><li>对于有环境兼容问题的代码，可以在打包过程中，通过模块加载器（Loader），对其进行编译转换</li><li>Webpack 还具备代码拆分的能力，能将应用当中所有的代码按照需求去打包，不用担心把所有的代码全部打包到一起，产生文件比较大的问题</li></ol><ul><li>可以把应用加载过程中初次运行时所必需的模块打包到一起，对于其他的模块单独存放，等到应用过程中实际需要某个模块时，再异步加载这个模块，实现增量加载或渐进式加载，这样就不用担心文件太碎或太大</li></ul><ol start="4"><li>对于前端模块类型问题，Webpack 支持在 JavaScript 中以模块化方式载入任意类型的资源文件</li></ol><ul><li>例如通过 JavaScript 直接 import 一个 css 文件，这个 css 文件最终通过 style 标签形式去工作</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>打包工具解决的是前端整体的模块化，并不单指 JavaScript 模块化<br> 让开发者在开发阶段更好的享受模块化带来的优势，又不用担心模块化对生产环境产生的影响</p></div>',23)]))}]]),o=JSON.parse('{"path":"/knowledge/frontEnd/engineering/buildTool/","title":"介绍","lang":"zh-CN","frontmatter":{"title":"介绍","order":1,"description":"模块打包工具的由来 模块化确实很好的解决了在复杂应用开发过程中的代码组织问题，但是随着引入模块化，又会产生新的问题 模块化问题 ES Modules 存在环境兼容问题 ES Modules 模块系统本身就存在环境兼容问题，尽管主流浏览器最新版本都支持这样一个特性，但是还没做到统一所有用户浏览器的使用情况 模块文件过多，网络请求频繁 通过模块化的方式划分...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/engineering/buildTool/"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"介绍"}],["meta",{"property":"og:description","content":"模块打包工具的由来 模块化确实很好的解决了在复杂应用开发过程中的代码组织问题，但是随着引入模块化，又会产生新的问题 模块化问题 ES Modules 存在环境兼容问题 ES Modules 模块系统本身就存在环境兼容问题，尽管主流浏览器最新版本都支持这样一个特性，但是还没做到统一所有用户浏览器的使用情况 模块文件过多，网络请求频繁 通过模块化的方式划分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T08:17:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T08:17:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"介绍\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/01.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/02.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/03.png\\"],\\"dateModified\\":\\"2025-01-16T08:17:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"模块打包工具的由来","slug":"模块打包工具的由来","link":"#模块打包工具的由来","children":[{"level":3,"title":"模块化问题","slug":"模块化问题","link":"#模块化问题","children":[]},{"level":3,"title":"方案设想","slug":"方案设想","link":"#方案设想","children":[]}]},{"level":2,"title":"模块打包工具概要","slug":"模块打包工具概要","link":"#模块打包工具概要","children":[]}],"git":{"createdTime":1737014243000,"updatedTime":1737015427000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":1}]},"readingTime":{"minutes":2.71,"words":814},"filePathRelative":"knowledge/frontEnd/engineering/buildTool/index.md","localizedDate":"2025年1月16日","excerpt":"<h2>模块打包工具的由来</h2>\\n<blockquote>\\n<p>模块化确实很好的解决了在复杂应用开发过程中的代码组织问题，但是随着引入模块化，又会产生新的问题</p>\\n</blockquote>","autoDesc":true}')}}]);