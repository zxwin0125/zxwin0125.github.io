"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[1869],{3386:(i,s)=>{s.A=(i,s)=>{const l=i.__vccOpts||i;for(const[i,a]of s)l[i]=a;return l}},3700:(i,s,l)=>{l.r(s),l.d(s,{comp:()=>e,data:()=>h});var a=l(6254);const n={class:"hint-container warning"},t={},e=(0,l(3386).A)(t,[["render",function(i,s){const l=(0,a.g2)("font");return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.Lk)("ul",null,[s[4]||(s[4]=(0,a.Lk)("li",null,"响应式这个概念曾经非常流行，但从发展来看，似乎「响应式」布局不再是一个必不可少的话题",-1)),s[5]||(s[5]=(0,a.Lk)("li",null,[(0,a.eW)("究其原因主要有以下几点： "),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"公司研发人力越来越充足，PC 端、移动端可以实现两套布局，分项目维护"),(0,a.Lk)("li",null,"响应式布局适配越来越简单")])],-1)),(0,a.Lk)("li",null,[s[1]||(s[1]=(0,a.eW)("但是响应式布局仍然有其存在的 ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[0]||(s[0]=[(0,a.eW)("价值")]))),_:1})]),s[2]||(s[2]=(0,a.eW)("： ")),s[3]||(s[3]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"移动端碎片化的现象将会无限期存在"),(0,a.Lk)("li",null,"前端也必然进入物联网，任何设备界面的响应布局将会成为关键挑战"),(0,a.Lk)("li",null,"除此之外，响应式布局也体现了 CSS 的灵活和发展")],-1))])]),s[59]||(s[59]=(0,a.Lk)("figure",null,[(0,a.Lk)("img",{src:"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/11.png",alt:"示意图",width:"500",tabindex:"0",loading:"lazy"}),(0,a.Lk)("figcaption",null,"示意图")],-1)),s[60]||(s[60]=(0,a.Lk)("h2",{id:"上帝视角——响应式布局适配方案",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#上帝视角——响应式布局适配方案"},[(0,a.Lk)("span",null,"上帝视角——响应式布局适配方案")])],-1)),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[s[7]||(s[7]=(0,a.eW)("首先来梳理一下 ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[6]||(s[6]=[(0,a.eW)("响应式布局的几种典型方案")]))),_:1})]),s[8]||(s[8]=(0,a.eW)("： ")),s[9]||(s[9]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"传统 float 浮动布局"),(0,a.Lk)("li",null,"相对单位布局"),(0,a.Lk)("li",null,"媒体查询"),(0,a.Lk)("li",null,"基于相对单位 rem 的 flexible 布局"),(0,a.Lk)("li",null,"flex 布局"),(0,a.Lk)("li",null,"grid 布局"),(0,a.Lk)("li",null,"借助 JavaScript")],-1))]),s[17]||(s[17]=(0,a.Lk)("li",null,"其中「传统 float 浮动布局」已经在前面有所体现（多栏自适应），这种实现方式比较传统，且能力较弱",-1)),(0,a.Lk)("li",null,[s[11]||(s[11]=(0,a.eW)("相对单位布局比较容易理解，梳理 ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[10]||(s[10]=[(0,a.eW)("CSS 中的相对单位")]))),_:1})]),s[12]||(s[12]=(0,a.eW)(" 有： ")),s[13]||(s[13]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"em"),(0,a.Lk)("li",null,"rem"),(0,a.Lk)("li",null,"vh、vw、vmin、vmax"),(0,a.Lk)("li",null,"%"),(0,a.Lk)("li",null,"calc()")],-1))]),(0,a.Lk)("li",null,[s[15]||(s[15]=(0,a.eW)("重点是理解这些相对单位的使用规范，「")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[14]||(s[14]=[(0,a.eW)("到底是相对于谁")]))),_:1})]),s[16]||(s[16]=(0,a.eW)("」"))])]),s[61]||(s[61]=(0,a.Fv)('<div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>em 相对于当前元素或当前元素继承来的字体的宽度，但是每个字母或汉字的宽度有可能是不一样的</li><li>那么一般来说，就是一个大写字母 M 的宽度（事实上，规范中有一个 x-height 概念，建议取 X 的高度，但并没有推荐绝对的计算执行标准，还需要看浏览器的实现，也有的地方采用 O 的高度）</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>一个非常容易出错的点在于：很多同学会认为 em 相对于父元素的字体大小，但是实际上取决于应用在什么 CSS 属性上</p><ul><li>对于 font-size 来说，em 相对于父元素的字体大小</li><li>line-height 中，em 却相对于自身字体的大小</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>rem 相对于根节点（html）的字体大小，根节点一个大写字母 M 的宽度（同上）</li></ul></div>',3)),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[s[19]||(s[19]=(0,a.eW)("这两个单位在响应式布局中非常重要，后续在真实线上适配案例中就能发现，")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[18]||(s[18]=[(0,a.eW)("以 rem 为核心，诞生了淘宝的 flexible 响应式布局的方案")]))),_:1})])])]),s[62]||(s[62]=(0,a.Fv)('<div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>vw 相对于视口宽度，100vw 就相当于一个视口宽度</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>vh 同理，1vh 表示视口高度的 1/100，100vh 就是一个视口高度</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>vmin 相对于视口的宽度或高度中较小的那个，也就是 1vw 和 1vh 取最小（Math.min(1vw, 1vh)）</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>vmax 相对于视口的宽度或高度中较大的那个，（Math.max(1vw, 1vh)）</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>% 的相对对象专门挑出来在后续介绍</li></ul></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>calc 也是一个响应式布局神器，它使得 CSS 有了运算的能力：</li></ul></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">width: calc(100vw - 80px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>除了相对单位以外，媒体查询（Media Query）以及 flex、grid 布局也都比较好理解</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  height: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">--test-height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function changePHeight (height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">document</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.documentElement.style</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.setProperty(&#39;--test-height&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> `$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{height}</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>事实上，所有的响应式布局手段都不是单一的，上述方法搭配使用，效果更明显，也更加简单可行</li><li>下面通过分析线上案例（淘宝 - 网易），来了解真实环境下的解决方案</li></ul><h2 id="真实线上适配案例分析" tabindex="-1"><a class="header-anchor" href="#真实线上适配案例分析"><span>真实线上适配案例分析</span></a></h2>',11)),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[s[21]||(s[21]=(0,a.eW)("在进入分析前，先罗列一下 ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[20]||(s[20]=[(0,a.eW)("其他关于响应式布局的概念")]))),_:1})]),s[22]||(s[22]=(0,a.eW)("： ")),s[23]||(s[23]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"屏幕分辨率"),(0,a.Lk)("li",null,"像素"),(0,a.Lk)("li",null,"PPI（Pixel Per Inch）：每英寸包括的像素数"),(0,a.Lk)("li",null,"DPI（Dot Per Inch）：即每英寸包括的点数"),(0,a.Lk)("li",null,"设备独立像素"),(0,a.Lk)("li",null,"设备像素比（dpr）"),(0,a.Lk)("li",null,"Meta Viewport")],-1))]),s[24]||(s[24]=(0,a.Lk)("li",null,[(0,a.eW)("不同设备的物理像素尺寸等信息可以参考："),(0,a.Lk)("a",{href:"https://material.io/tools/devices/",target:"_blank",rel:"noopener noreferrer"},"Device Metrics")],-1)),s[25]||(s[25]=(0,a.Lk)("li",null,"首先，淘宝通过设置：",-1))]),s[63]||(s[63]=(0,a.Fv)('<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/12.png" alt="示意图" width="500" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>禁用了用户缩放功能，使页面宽度和设备宽度对齐，一般这种操作也是移动端的响应式适配的标配</li><li>观察在页面根节点 HTML 元素上，显式设置了 font-size：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/13.png" alt="示意图" width="500" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>并且进行试验，当改变浏览器大小时，html 的 font-size 会动态变化</li><li>这样不难理解， 采用 rem 作为相对单位的长宽数值，都会随着 resize 事件进行变化（因为 html 的 font-size 动态变化）</li><li>在其页面当中，不难找到这样的代码：</li><li>将其复制并美化出来，得到：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tvar</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">documentElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\td</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">devicePixelRatio</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tfunction</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tvar</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clientWidth</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.75</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\tn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fontSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;px&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\t\tt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">\t\t\t\t?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fontSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;16px&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">\t\t\t\t:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t})(),</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\t\ti</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;resize&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;pageshow&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\t\te</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">persisted</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t}),</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">\t\t2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tvar</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> o</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;body&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">\t\t\ta</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t\t(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">border</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;.5px solid transparent&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\t\to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\t\tn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">\t\t\t1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">offsetHeight</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">classList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;hairlines&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\t\tn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">removeChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>核心逻辑不难理解，这是一个 IIFE，在 DOMContentLoaded、resize、pageshow 事件触发时，进行对 html 的 font- size 值设定，计算方式：</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">font-size</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> = document</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.documentElement.clientWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.75</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>为什么这么计算呢？ <ul><li>可以肯定的是：淘宝的工程师是按照设计 375px 的视觉稿完成的</li><li>在 375px 视觉稿下，html 的 font-size 为 100，那么如果宽度是 75px 的元素，就可以设置为 0.75rem（100 _0.75 = 75px）</li><li>当设备宽度为 414px（iPhone8 plus）时，想让上述元素的宽度等比例自适应到 82.8px（75_ 414 / 375），那么在 CSS 样式为 0.74rem 不变的前提下，想计算得到 82.8px，只需 HTML font-size 变为：110.4px 即可（110.4 - 0.75 = 82.8）</li><li>那么反向过来，这个 110.4 的计算公式就是：</li></ul></li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">document</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.documentElement.clientWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> / 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.75</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>当然淘宝实现响应式布局除了依靠 rem 以外，还大量运用了 flex 布局，比如页面中最复杂的布局区块：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/14.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>实现较为简单</li><li>整套解决方案淘宝开源出来，叫做 flexible 布局</li><li>再来看看网易的做法，大体类似：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/15.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>同样采用了 rem 布局，但区别是网易并没有 JavaScript 介入计算 html 的 font-size，而是通过媒体查询和 calc 手段，「枚举」了不同设备下不同的 HTML font-size 值</li><li>在其页面中，较为复杂的头部 slider 组件中：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/16.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>slider 宽度明显是 JavaScript 获取设备宽度后动态赋值的（图中为 414px），而高度采用了 rem 布局： 3.7 rem = 55.3px(calc(13.33333333vw) - 3.7)</li><li>总结一下，响应式布局并没有那么困难，需要掌握最基本的处理手段，在实际场景中综合运用多种套路即可实现最大限度的灵活</li></ul><h2 id="bootstrap-栅格实现思路" tabindex="-1"><a class="header-anchor" href="#bootstrap-栅格实现思路"><span>Bootstrap 栅格实现思路</span></a></h2><ul><li>Bootrap 栅格化是一个非常伟大的实现，在使用 Bootrap 布局时，可以通过添加类的方法，轻松实现栅格化，流式布局</li><li>选取代表性的 BS4 官网范例，可以<a href="http://v4.bootcss.com/examples/dashboard/#" target="_blank" rel="noopener noreferrer">在线参考</a>，或者参看以下截图，在宽屏幕下，看到：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/17.png" alt="示意图" width="500" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>当屏幕宽度小于 576px 时候，有：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/18.png" alt="示意图" width="200" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><ul><li>对应代码：</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;col-6 col-sm-3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;col-6 col-sm-3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;col-6 col-sm-3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.col-6 class 样式在源码里面可以简单归纳（不完全）为：</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.col-6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-webkit-box-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-webkit-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-ms-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tflex: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tmax-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>.col-sm-3 class 在源码里面可以归纳为：</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.col-sm-3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-webkit-box-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-webkit-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t-ms-flex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tflex: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tmax-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到，代码里设置了两个 class：col-6 col-sm-3 进行样式声明</li><li>从上面样式代码里看到类似 <code>flex: 0 0 25%</code> 的声明，为了理解它，可以从 flex 属性入手：flex 属性是 flex-grow、flex- shrink 和 flex-basis 的简写（类似 backgroud 是很多背景属性的简写一样），它的默认值为 0 1 auto，后两个属性可选</li><li>语法格式如下： <ul><li>flex-grow：属性定义项目的放大比例，默认为 0，Bootstrap 代码里这个值一直为 0，即如果存在剩余空间，也不放大</li><li>flex-shrink：属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小</li><li>flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）</li></ul></li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tflex: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">none</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | [ &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;flex-grow&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;flex-shrink&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;? || &lt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;flex-basis&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;];</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>浏览器根据这个属性，计算主轴是否有多余空间，它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间</li><li>Bootstrap 这里对 flex 设置为比例值，这也是响应式自然而然实现的基础</li><li>但是很明显 col-6 col-sm-3 的样式属性是有冲突的，那么他们是如何做到和平共处交替发挥作用的呢？</li><li>事实上： <ul><li>在屏幕宽度大于 576px 时候，会发现 .col-sm-3 并没有起作用，这时候起作用的是 .col-6</li></ul></li><li>在源码里发现 .col-sm-- 的样式声明全部在</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (min-width: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">576</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">..</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">.}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>的媒体查询中，这就保证了在 576px 宽度以上的屏幕，只有在媒体查询之外的 .col-- 样式声明发挥了作用 <ul><li>在屏幕宽度小于 576px 时候，命中媒体查询，命中 .col-sm-3 的样式声明</li><li>它的优先级一定大于 .col-6（媒体查询优先级高），这时候就保证了移动端的样式占上风</li></ul></li><li>再结合 col-6 col-sm-3 的样式声明，可以简单总结一下：Bootstrap 主要是通过百分比宽度（max-width: 50%; max-width: 25%;），以及 flex 属性，再加上媒体查询，三管齐下实现了栅格化布局的主体</li></ul><h2 id="横屏适配以及其他细节问题" tabindex="-1"><a class="header-anchor" href="#横屏适配以及其他细节问题"><span>横屏适配以及其他细节问题</span></a></h2><ul><li>很多 H5 页面中，要区分横屏和竖屏，在不同屏幕下要显示不同的布局，所以需要检测在不同的场景下给定不同的样式</li><li>通常使用 JavaScript 检查：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;resize&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orientation</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 180</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orientation</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\tconsole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;竖屏&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orientation</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 90</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orientation</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">90</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">\t\tconsole</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;横屏&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同样可以使用纯 CSS 来实现不同场景下的布局：</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (orientation: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">portrait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t/*竖屏样式代码*/</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> screen</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (orientation: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">landscape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t/*横屏样式代码.*/</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>同时这里在总结一下其他常见的响应式布局话题： <ul><li>1px 问题</li><li>适配 iPhoneX 齐刘海</li><li>图片自适应</li></ul></li></ul><h2 id="面试题-相对于谁" tabindex="-1"><a class="header-anchor" href="#面试题-相对于谁"><span>面试题：% 相对于谁</span></a></h2><ul><li>之前讲解了实现水平垂直居中的几种方式</li><li>其中 absolute - transform 方案，用到了不止一处 % 单位</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.wp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tposition: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">relative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tposition: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\ttop: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\tleft: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\ttransform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">translate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',41)),(0,a.Lk)("ul",null,[s[36]||(s[36]=(0,a.Lk)("li",null,[(0,a.eW)("事实上，上述代码中的 % 还真代表着不一样的计算规则 "),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"第一处 50% 是指 .wp 相对定位元素宽度和高度的 50%，而 transform 中的 50% 是指自身元素的宽高的一半")])],-1)),s[37]||(s[37]=(0,a.Lk)("li",null,"那么在 CSS 中，这个常见的 % 单位有着什么样的规则呢？这也是一道很好的面试题目，在这一部分进行梳理",-1)),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[26]||(s[26]=[(0,a.eW)("position: absolute 中的 %")]))),_:1})]),s[27]||(s[27]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"对于设置绝对定位 position absolute 的元素，可以使用 left right 表示其偏移量，把这个元素的祖先元素中第一个存在定位属性的元素成为参照物元素"),(0,a.Lk)("li",null,"其中的 % 是相对于参照物的，left 相对于参照物的 width，top 相对于这个参照物的 height")],-1))]),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[28]||(s[28]=[(0,a.eW)("position: relative 中的 %")]))),_:1})]),s[29]||(s[29]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"对于设置相对定位 position relative 的元素，% 的数值是相对与自身的，left 相对于自己的 width，top 相对于自己的 height")],-1))]),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[30]||(s[30]=[(0,a.eW)("position: fixed 中的 %")]))),_:1})]),s[31]||(s[31]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"对于设置固定定位 position fixed 的元素，% 的数值是相对于视口的，left 相对于视口的 width，top 相对于视口的 height")],-1))]),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[32]||(s[32]=[(0,a.eW)("margin 和 padding 的 %")]))),_:1})]),s[33]||(s[33]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"margin 和 padding 当中的 % 非常特殊，它是相对于父元素的宽度"),(0,a.Lk)("li",null,"没错，margin-top: 30%，相当于父元素宽度的 30%")],-1))]),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[34]||(s[34]=[(0,a.eW)("border-radius 的 %")]))),_:1})]),s[35]||(s[35]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"经常对一个正方形元素设置："),(0,a.Lk)("li",null,"得到一个圆形，因此不难发现这里的 % 也是相对于自身宽高的")],-1))])]),s[64]||(s[64]=(0,a.Fv)('<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">border-radius</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">: 50%;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>background-size 的 %</strong><ul><li>background-size 的百分比和 border-radius 一样，也是相对于自身的宽高</li></ul></li><li><strong>transform: translate</strong><ul><li>transform 的 translate 属性 % 是相对于自身的宽高，这也是上述代码能够实现居中的原因</li></ul></li><li><strong>text-indent 的 %</strong><ul><li>text-indent 这个属性可以设置首行缩进，当使用 % 时，它是相对于父元素的 width</li></ul></li><li><strong>font-size 的 %</strong><ul><li>相对于父元素的字体大小</li></ul></li><li><strong>line-height 的 %</strong><ul><li>line-height 设置行高时，如果单位为 %，则相对于该元素的 font-size 数值</li></ul></li><li>这些就是常见的使用 % 的情况，还是很灵活多变的，具体细节都可以在 CSS 规范中找到</li></ul><h2 id="深入-flex-布局和传统-float-布局性能对比" tabindex="-1"><a class="header-anchor" href="#深入-flex-布局和传统-float-布局性能对比"><span>深入：flex 布局和传统 float 布局性能对比</span></a></h2>',3)),(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[s[39]||(s[39]=(0,a.eW)("最后这部分，来深入一个关于性能的话题：")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[38]||(s[38]=[(0,a.eW)("flex 布局对性能的影响主要体现在哪方面？")]))),_:1})]),s[40]||(s[40]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"这里指出来的目的是开拓思路，更加合理地认识 CSS 布局")],-1))]),(0,a.Lk)("li",null,[s[42]||(s[42]=(0,a.eW)("先思考一下 ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[41]||(s[41]=[(0,a.eW)("flex 布局对性能到底有什么影响，或者有多大影响")]))),_:1})]),s[43]||(s[43]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,"首先性能问题一定是一个相对概念"),(0,a.eW)(" ，flex 布局相比正常的 block layout（non-float）性能开销一定更大")]),(0,a.Lk)("li",null,[(0,a.eW)("事实上，block layout 永远都是 "),(0,a.Lk)("strong",null,"single-pass"),(0,a.eW)(" ，算法进行布局，而 flex 布局却总会激发 "),(0,a.Lk)("strong",null,"multi-pass codepaths"),(0,a.eW)(" 算法布局")]),(0,a.Lk)("li",null,"比如常用的 flex-align: stretch 通常都是 2-pass，这是无可争议且难以避免的短板，天生基因决定")],-1))]),s[44]||(s[44]=(0,a.Lk)("li",null,"来做一个对比，display: table VS display: flex",-1)),s[45]||(s[45]=(0,a.Lk)("li",null,"这里重复 1000 次这样的 DOM：",-1)),s[46]||(s[46]=(0,a.Lk)("li",null,[(0,a.eW)("分别使用 flex 和 table 布局，并采用 "),(0,a.Lk)("a",{href:"https://link.zhihu.com/?target=http%3A//www.w3.org/TR/navigation-timing/",target:"_blank",rel:"noopener noreferrer"},"Navigation Timing API"),(0,a.eW)(" 进行布局速度测量，代码如下：")],-1))]),s[65]||(s[65]=(0,a.Fv)('<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TimeThisMother</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> t</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> performance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">timing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Speed of selection is: &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loadEventEnd</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">responseEnd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; milliseconds&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>得到结果： <ul><li>flex 布局：Speed of selection is: 248 milliseconds</li><li>table 布局：Speed of selection is: 282 milliseconds</li></ul></li><li>flex 布局要比 table 布局似乎更快</li><li>曾经一个名叫 Chris Coyier 的开发者，实现了这样一个 flex 布局生成器</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/19.png" alt="示意图" width="600" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意右上角的滑动条，越向右滑，页面不同颜色区块越多（截图上滚动条已经很短了，证明页面已经很长，布局区块很多），在如此大规模全面使用 flex 布局下，页面丝毫没有任何卡顿</p></div><ul><li>如上图，打开 Chrome Dev Tools &gt; Timeline，单击 record 按钮，滑动滑块并停止，得到瀑布流紫色部分，显示性能效果良好</li><li>当然这样的「模拟」距离真实场景也许较远，不排除如果页面中存在很多图片就会使得性能开销激增，可能使用 flex 某些属性也会付出昂贵的代价</li><li>但是一般场景使用，没有必要去担心 flex 布局性能问题，至少它比别的方案靠谱（先不论兼容性）</li><li><strong>可以去 codepen 进行体验：</strong> <a href="https://codepen.io/chriscoyier/pen/AbrdNe" target="_blank" rel="noopener noreferrer">Generate a Crapload of Flexboxcodepen.io</a></li></ul>',5)),(0,a.Lk)("div",n,[s[49]||(s[49]=(0,a.Lk)("p",{class:"hint-container-title"},"注意",-1)),(0,a.Lk)("p",null,[s[48]||(s[48]=(0,a.eW)("需要格外提出的是： ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[47]||(s[47]=[(0,a.eW)("新版 flex 布局一般比旧版布局模型更快，同样也比基于浮动的布局模型更快")]))),_:1})])])]),(0,a.Lk)("ul",null,[s[55]||(s[55]=(0,a.Lk)("li",null,"这里来特殊对比一下 flex 布局和浮动布局在性能上的表现",-1)),s[56]||(s[56]=(0,a.Lk)("li",null,[(0,a.eW)("很明显，对于相同数量的元素和相同的视觉外观，flex 布局的时间要少得多（本例中分别为 3.5 毫秒和 14 毫秒），对比来源："),(0,a.Lk)("a",{href:"http://developers.google.com/",target:"_blank",rel:"noopener noreferrer"},"developers.google.com")],-1)),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[50]||(s[50]=[(0,a.eW)("布局性能的开销，一般直接考虑如下因素：")]))),_:1})]),s[51]||(s[51]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"需要布局的元素数量"),(0,a.Lk)("li",null,"布局的复杂性")],-1))]),(0,a.Lk)("li",null,[s[53]||(s[53]=(0,a.eW)("相对地， ")),(0,a.Lk)("strong",null,[(0,a.bF)(l,{color:"red"},{default:(0,a.k6)((()=>s[52]||(s[52]=[(0,a.eW)("对于布局性能建议主要有：")]))),_:1})]),s[54]||(s[54]=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,"应尽可能避免触发布局（layout／reflow）"),(0,a.Lk)("li",null,"避免强制同步布局和布局抖动")],-1))]),s[57]||(s[57]=(0,a.Lk)("li",null,"不论什么样的布局，在性能上一般很难成为瓶颈",-1)),s[58]||(s[58]=(0,a.Lk)("li",null,"同时另一方面，CSS 看似简单，却也和性能息息相关",-1))])])}]]),h=JSON.parse('{"path":"/knowledge/frontEnd/css/responsiveLayoutAndBootstrap.html","title":"响应式布局和 Bootstrap 的实现分析","lang":"zh-CN","frontmatter":{"title":"响应式布局和 Bootstrap 的实现分析","date":"2024-08-12T00:00:00.000Z","category":["CSS3"],"tag":["响应式布局"],"order":5,"description":"响应式这个概念曾经非常流行，但从发展来看，似乎「响应式」布局不再是一个必不可少的话题 究其原因主要有以下几点： 公司研发人力越来越充足，PC 端、移动端可以实现两套布局，分项目维护 响应式布局适配越来越简单 但是响应式布局仍然有其存在的 ： 移动端碎片化的现象将会无限期存在 前端也必然进入物联网，任何设备界面的响应布局将会成为关键挑战 除此之外，响应式...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/css/responsiveLayoutAndBootstrap.html"}],["meta",{"property":"og:site_name","content":"欢迎来到我的Blog"}],["meta",{"property":"og:title","content":"响应式布局和 Bootstrap 的实现分析"}],["meta",{"property":"og:description","content":"响应式这个概念曾经非常流行，但从发展来看，似乎「响应式」布局不再是一个必不可少的话题 究其原因主要有以下几点： 公司研发人力越来越充足，PC 端、移动端可以实现两套布局，分项目维护 响应式布局适配越来越简单 但是响应式布局仍然有其存在的 ： 移动端碎片化的现象将会无限期存在 前端也必然进入物联网，任何设备界面的响应布局将会成为关键挑战 除此之外，响应式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/11.png =500x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-24T01:31:28.000Z"}],["meta",{"property":"article:tag","content":"响应式布局"}],["meta",{"property":"article:published_time","content":"2024-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-24T01:31:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式布局和 Bootstrap 的实现分析\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/11.png =500x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/12.png =500x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/13.png =500x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/14.png =700x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/15.png =700x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/16.png =700x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/17.png =500x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/18.png =200x\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/CSS/19.png =600x\\"],\\"datePublished\\":\\"2024-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-24T01:31:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"上帝视角——响应式布局适配方案","slug":"上帝视角——响应式布局适配方案","link":"#上帝视角——响应式布局适配方案","children":[]},{"level":2,"title":"真实线上适配案例分析","slug":"真实线上适配案例分析","link":"#真实线上适配案例分析","children":[]},{"level":2,"title":"Bootstrap 栅格实现思路","slug":"bootstrap-栅格实现思路","link":"#bootstrap-栅格实现思路","children":[]},{"level":2,"title":"横屏适配以及其他细节问题","slug":"横屏适配以及其他细节问题","link":"#横屏适配以及其他细节问题","children":[]},{"level":2,"title":"面试题：% 相对于谁","slug":"面试题-相对于谁","link":"#面试题-相对于谁","children":[]},{"level":2,"title":"深入：flex 布局和传统 float 布局性能对比","slug":"深入-flex-布局和传统-float-布局性能对比","link":"#深入-flex-布局和传统-float-布局性能对比","children":[]}],"git":{"createdTime":1732172157000,"updatedTime":1732411888000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":3}]},"readingTime":{"minutes":13.51,"words":4052},"filePathRelative":"knowledge/frontEnd/css/responsiveLayoutAndBootstrap.md","localizedDate":"2024年8月12日","excerpt":"<ul>\\n<li>响应式这个概念曾经非常流行，但从发展来看，似乎「响应式」布局不再是一个必不可少的话题</li>\\n<li>究其原因主要有以下几点：\\n<ul>\\n<li>公司研发人力越来越充足，PC 端、移动端可以实现两套布局，分项目维护</li>\\n<li>响应式布局适配越来越简单</li>\\n</ul>\\n</li>\\n<li>但是响应式布局仍然有其存在的 <strong></strong>：\\n<ul>\\n<li>移动端碎片化的现象将会无限期存在</li>\\n<li>前端也必然进入物联网，任何设备界面的响应布局将会成为关键挑战</li>\\n<li>除此之外，响应式布局也体现了 CSS 的灵活和发展</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);