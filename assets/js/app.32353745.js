"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3524],{2798:(n,e,i)=>{i.d(e,{l:()=>t});const t={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},工具:{path:"/category/%E5%B7%A5%E5%85%B7/",indexes:[1]},CSS3:{path:"/category/css3/",indexes:[2,3,4,5,6]},HTML5:{path:"/category/html5/",indexes:[7,8,9]},JavaScript:{path:"/category/javascript/",indexes:[10,11,12,13,14,15,16]},面试:{path:"/category/%E9%9D%A2%E8%AF%95/",indexes:[17]},"Web components":{path:"/category/web-components/",indexes:[18]}}}},tag:{"/":{path:"/tag/",map:{页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0,1]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0,1]},"CSS BFC":{path:"/tag/css-bfc/",indexes:[2]},"CSS Modules":{path:"/tag/css-modules/",indexes:[4]},"CSS Variable":{path:"/tag/css-variable/",indexes:[5]},响应式布局:{path:"/tag/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/",indexes:[6]},CSS:{path:"/tag/css/",indexes:[17]}}}}}},8589:(n,e,i)=>{i.d(e,{M:()=>t});const t=["/posts/2024-03-01-blog_example.html","/posts/2024-03-02-blog_example2.html","/knowledge/frontEnd/css/bfc.html","/knowledge/frontEnd/css/cssCenter.html","/knowledge/frontEnd/css/cssModules.html","/knowledge/frontEnd/css/cssVariable.html","/knowledge/frontEnd/css/responsiveLayoutAndBootstrap.html","/knowledge/frontEnd/html/htmlSemanticization.html","/knowledge/frontEnd/html/html5Mobile.html","/knowledge/frontEnd/html/html5Tag.html","/knowledge/frontEnd/javascript/asynchronous.html","/knowledge/frontEnd/javascript/es6Next.html","/knowledge/frontEnd/javascript/objectPrototype.html","/knowledge/frontEnd/javascript/promise.html","/knowledge/frontEnd/javascript/api.html","/knowledge/frontEnd/javascript/closure.html","/knowledge/frontEnd/javascript/this.html","/knowledge/interview/css/","/knowledge/frontEnd/html/webComponents/webComponents.html","/knowledge/frontEnd/performanceOptimization/reactFrame.html","/knowledge/frontEnd/javascript/other.html","/knowledge/frontEnd/frame/frameStudy.html","/knowledge/frontEnd/frame/frameIsomorphic.html","/knowledge/frontEnd/frame/frameAnalogy.html","/knowledge/frontEnd/frame/react/reactNowAndFuture.html","/knowledge/frontEnd/frame/react/reactStatus.html","/knowledge/frontEnd/frame/react/reactComponentDesign.html","/knowledge/frontEnd/frame/react/understandReact.html","/knowledge/frontEnd/performanceOptimization/problems.html","/knowledge/frontEnd/performanceOptimization/monitorAndError.html","/knowledge/frontEnd/engineering/codeSpecification.html","/knowledge/frontEnd/engineering/projectOrganizationDesign.html","/knowledge/frontEnd/engineering/webpack.html","/knowledge/frontEnd/engineering/module.html","/knowledge/frontEnd/programmingThinkingAndAlgorithms/wx.html","/knowledge/frontEnd/programmingThinkingAndAlgorithms/algorithms.html","/knowledge/frontEnd/programmingThinkingAndAlgorithms/function.html","/knowledge/frontEnd/programmingThinkingAndAlgorithms/dataStructure.html","/knowledge/frontEnd/programmingThinkingAndAlgorithms/designPattern.html"]},594:(n,e,i)=>{i.d(e,{U:()=>t});const t={article:{"/":{path:"/article/",indexes:[0,17,19,2,3,7,4,5,6,8,9,18,20,10,11,12,13,14,1,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]}},star:{"/":{path:"/star/",indexes:[0]}},timeline:{"/":{path:"/timeline/",indexes:[17,19,2,3,7,4,5,6,8,9,18,20,10,11,12,13,14,1,0,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]}}}},9657:(n,e,i)=>{i.d(e,{B:()=>j});var t={};i.r(t);var a={};i.r(a);var l={};i.r(l),i.d(l,{default:()=>b});var s={};i.r(s);var o={};i.r(o),i.d(o,{default:()=>S});var r={};i.r(r),i.d(r,{default:()=>T});var d={};i.r(d),i.d(d,{default:()=>L});var h=i(3894),c=i(6350),p=i(490),m=i(6023),k=i(6031),g=i(6011),u=i(7251);const b={enhance:({app:n})=>{(0,h.L4)("FontIcon")||n.component("FontIcon",p.A),(0,h.L4)("Badge")||n.component("Badge",m.A),(0,h.L4)("BiliBili")||n.component("BiliBili",k.A),(0,h.L4)("CodePen")||n.component("CodePen",g.A),(0,h.L4)("VidStack")||n.component("VidStack",u.A)},setup:()=>{(0,c.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,c.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var f=i(901),y=i(3072),A=i(2524),x=i(6132),v=i(8963),w=i(690),B=i(3982),E=i(765);const S={enhance:({app:n})=>{}};var F=i(5552),C=i(8467),R=i(6376),O=i(7460),M=i(4444),P=i(6254),D=i(9886);(0,M.M_)((n=>{const e=n.t,i=!1!==n.I,t=n.i;return i?{title:e,content:t?()=>[(0,P.h)(O.GB,{icon:t}),e]:null,order:n.O,index:n.I}:null}));const T={enhance:({app:n,router:e})=>{const{scrollBehavior:i}=e.options;e.options.scrollBehavior=async(...n)=>(await O.lE.wait(),i(...n)),(0,O.fk)(n),n.component("HopeIcon",O.GB),n.component("BloggerInfo",D.tI),n.component("SocialMedias",D.rS)},setup:()=>{(0,O.PV)(),(0,O.i$)(),(0,D.su)()},layouts:{Layout:O.PE,NotFound:O.Mk,BlogCategory:D.Pn,BlogHome:D.qX,BlogType:D.z7,Timeline:D.Kf}},I=(0,P.pM)({name:"SocialLink",setup:()=>()=>(0,P.h)("div",{class:"vp-nav-item vp-action"},(0,P.h)("a",{class:"vp-action-link",href:"https://discord.gg/PZTQfJ4GjX",target:"_blank",rel:"noopener noreferrer","aria-label":"discord",innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640" style="width:1.25rem;height:1.25rem;vertical-align:middle"><path d=\'m534.42,126.58a1.57,1.57 0 0 0 -0.79,-0.73a507.33,507.33 0 0 0 -125.19,-38.81a1.9,1.9 0 0 0 -2.01,0.95a352.96,352.96 0 0 0 -15.58,32.01a468.41,468.41 0 0 0 -140.6,0a323.75,323.75 0 0 0 -15.82,-32.01a1.98,1.98 0 0 0 -2.02,-0.95a505.9,505.9 0 0 0 -125.19,38.81a1.79,1.79 0 0 0 -0.82,0.7c-79.73,119.07 -101.57,235.21 -90.86,349.9a2.11,2.11 0 0 0 0.81,1.44a510.06,510.06 0 0 0 153.56,77.6a1.99,1.99 0 0 0 2.15,-0.71a364.19,364.19 0 0 0 31.42,-51.08a1.95,1.95 0 0 0 -1.07,-2.71a335.92,335.92 0 0 1 -47.98,-22.85a1.98,1.98 0 0 1 -0.19,-3.27c3.22,-2.42 6.44,-4.93 9.53,-7.46a1.9,1.9 0 0 1 1.99,-0.27c100.65,45.94 209.61,45.94 309.07,0a1.89,1.89 0 0 1 2.01,0.24c3.09,2.54 6.31,5.07 9.55,7.49a1.97,1.97 0 0 1 -0.17,3.27a315.25,315.25 0 0 1 -48,22.83a1.97,1.97 0 0 0 -1.05,2.73a409.02,409.02 0 0 0 31.4,51.05a1.95,1.95 0 0 0 2.15,0.73a508.37,508.37 0 0 0 153.81,-77.59a1.97,1.97 0 0 0 0.81,-1.41c12.82,-132.61 -21.48,-247.79 -90.93,-349.9zm-315.91,280.03c-30.3,0 -55.27,-27.81 -55.27,-61.96s24.48,-61.96 55.27,-61.96c31.03,0 55.76,28.05 55.27,61.96c0,34.15 -24.48,61.96 -55.27,61.96zm204.35,0c-30.3,0 -55.27,-27.81 -55.27,-61.96s24.48,-61.96 55.27,-61.96c31.03,0 55.76,28.05 55.27,61.96c0,34.15 -24.23,61.96 -55.27,61.96z\' fill="currentColor"/></svg>'}))}),L=(0,i(5525).re)({enhance:({app:n})=>{n.component("SocialLink",I)}}),j=[t,a,l,f,y,A,x,v,w,B,E,s,o,F,C,R,r,d].map((n=>n.default)).filter(Boolean)},6159:(n,e,i)=>{i.d(e,{J:()=>a,c:()=>t});const t=JSON.parse('{"/_posts/2024-03-01-blog_example.html":"/posts/2024-03-01-blog_example.html","/_posts/2024-03-02-blog_example2.html":"/posts/2024-03-02-blog_example2.html"}'),a=Object.fromEntries([["/DailyRoutine.html",{loader:()=>i.e(535).then(i.bind(i,3699)),meta:{t:"每日仪式",i:"fa6-solid:check-to-slot"}}],["/Fitness.html",{loader:()=>i.e(98).then(i.bind(i,9875)),meta:{t:"健身计划",i:"fa6-solid:dumbbell"}}],["/",{loader:()=>i.e(4470).then(i.bind(i,5364)),meta:{t:"LearnData 开源笔记",i:"fa6-solid:book-open-reader"}}],["/blog.html",{loader:()=>i.e(6632).then(i.bind(i,774)),meta:{t:"互联网小白",i:"fa6-solid:house-crack"}}],["/intro.html",{loader:()=>i.e(3912).then(i.bind(i,497)),meta:{t:"个人介绍",i:"fa6-solid:circle-nodes"}}],["/posts/2024-03-01-blog_example.html",{loader:()=>i.e(6518).then(i.bind(i,4701)),meta:{d:17092512e5,l:"2024年3月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,e:"<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>\n",r:{minutes:.64,words:192},t:"博客文章样例",O:-1,y:"a"}}],["/posts/2024-03-02-blog_example2.html",{loader:()=>i.e(6467).then(i.bind(i,2660)),meta:{d:17093376e5,l:"2024年3月2日",c:["工具"],g:["页面配置","使用指南"],e:"<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>\n",r:{minutes:.13,words:39},t:"博客文章样例 2",O:-1,y:"a"}}],["/apps/Applist.html",{loader:()=>i.e(1024).then(i.bind(i,7060)),meta:{t:"必备应用",i:"fa6-solid:list",O:1}}],["/apps/Chrome.html",{loader:()=>i.e(4281).then(i.bind(i,5896)),meta:{t:"Chrome 扩展",i:"fa6-brands:chrome",O:3}}],["/apps/design.html",{loader:()=>i.e(429).then(i.bind(i,8641)),meta:{t:"平面设计",i:"fa6-solid:image",O:90}}],["/apps/toolbox.html",{loader:()=>i.e(8672).then(i.bind(i,3123)),meta:{t:"开源工具",i:"fa6-solid:land-mine-on",O:2}}],["/code/AutoHotkey.html",{loader:()=>i.e(9513).then(i.bind(i,5260)),meta:{t:"AutoHotkey",i:"fa6-brands:autoprefixer",O:4}}],["/code/Electron.html",{loader:()=>i.e(794).then(i.bind(i,1674)),meta:{t:"Electron",i:"fa6-solid:atom",O:7}}],["/code/HTML.html",{loader:()=>i.e(8489).then(i.bind(i,1911)),meta:{t:"HTML",i:"fa6-brands:html5",O:1}}],["/code/Javascript.html",{loader:()=>i.e(1079).then(i.bind(i,39)),meta:{t:"JavaScript",i:"fa6-brands:js",O:2}}],["/code/Markdown.html",{loader:()=>i.e(1765).then(i.bind(i,5866)),meta:{t:"Markdown",i:"fa6-brands:markdown",O:5}}],["/code/Python.html",{loader:()=>i.e(822).then(i.bind(i,9698)),meta:{t:"Python",i:"fa6-brands:python",O:3}}],["/code/",{loader:()=>i.e(738).then(i.bind(i,6847)),meta:{t:"Coding",i:"fa6-solid:code"}}],["/code/Regex.html",{loader:()=>i.e(5865).then(i.bind(i,5871)),meta:{t:"正则表达式",i:"fa6-solid:repeat",O:6}}],["/code/Vue.html",{loader:()=>i.e(5050).then(i.bind(i,8191)),meta:{t:"Vue",i:"fa6-brands:vuejs",O:2}}],["/deploy/CloudServices.html",{loader:()=>i.e(3261).then(i.bind(i,2165)),meta:{t:"云计算服务",i:"fa6-solid:cloud-arrow-up",O:2}}],["/deploy/Cloudflare.html",{loader:()=>i.e(8689).then(i.bind(i,8659)),meta:{t:"Cloudflare",i:"fa6-brands:cloudflare",O:5}}],["/deploy/DNS.html",{loader:()=>i.e(1175).then(i.bind(i,8376)),meta:{t:"域名 DNS 托管",i:"fa6-solid:sitemap",O:6}}],["/deploy/GitHub.html",{loader:()=>i.e(4493).then(i.bind(i,3426)),meta:{t:"GitHub",i:"fa6-brands:github",O:4}}],["/deploy/MySQL.html",{loader:()=>i.e(5342).then(i.bind(i,962)),meta:{t:"数据库管理",i:"fa6-solid:database",O:3}}],["/deploy/Static.html",{loader:()=>i.e(5888).then(i.bind(i,1854)),meta:{t:"静态部署",i:"fa6-solid:circle-nodes",O:1}}],["/deploy/VPS.html",{loader:()=>i.e(7915).then(i.bind(i,9041)),meta:{t:"服务器 VPS",i:"fa6-brands:ioxhost",O:3}}],["/family/Coupon.html",{loader:()=>i.e(4713).then(i.bind(i,9205)),meta:{t:"网购攻略",i:"fa6-solid:cart-shopping",O:3}}],["/family/Diet.html",{loader:()=>i.e(7533).then(i.bind(i,8002)),meta:{t:"健康饮食",i:"fa6-solid:wheat-awn-circle-exclamation",O:1}}],["/family/Life.html",{loader:()=>i.e(189).then(i.bind(i,711)),meta:{t:"生活窍门",i:"fa6-solid:star-of-life",O:6}}],["/web/Comments.html",{loader:()=>i.e(2657).then(i.bind(i,299)),meta:{t:"评论插件",i:"fa6-solid:comment-dots",O:3}}],["/web/VuePress.html",{loader:()=>i.e(9240).then(i.bind(i,6345)),meta:{t:"VuePress",i:"fa6-brands:vuejs",O:1}}],["/web/docsify.html",{loader:()=>i.e(3652).then(i.bind(i,5124)),meta:{t:"docsify",i:"simple-icons:docsify",O:2}}],["/apps/topic/",{loader:()=>i.e(6223).then(i.bind(i,3783)),meta:{t:"专题示例",i:"fa6-solid:icons"}}],["/apps/topic/topic01.html",{loader:()=>i.e(3795).then(i.bind(i,4418)),meta:{t:"专题文章1",O:1}}],["/apps/topic/topic02anytitle.html",{loader:()=>i.e(9922).then(i.bind(i,5717)),meta:{t:"专题文章2",O:2}}],["/knowledge/frontEnd/css/bfc.html",{loader:()=>i.e(583).then(i.bind(i,5877)),meta:{d:17235072e5,l:"2024年8月13日",c:["CSS3"],g:["CSS BFC"],e:"<ul>\n<li>我们 CSS 深入一个概念 —— BFC</li>\n<li>BFC 是前端面试中的一个超级热点，今日头条某部门曾经就问过：\n<ul>\n<li>请解释一下 <strong>BFC 是什么？</strong> 回答这个问题并不困难，但是可以继续追问：\n<ul>\n<li><strong>BFC 会引起哪些布局现象？</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>BFC 是什么</h3>\n<ul>\n<li>简单来说，BFC 就是：\n<ul>\n<li>BFC 是 Block Formatting Context 的简写，可以直接翻译成「<strong></strong>」</li>\n<li><strong>它会创建一个特殊的区域，在这个区域中，只有 block box 参与布局</strong></li>\n<li>而 BFC 的一套特点和规则就规定了在这个特殊的区域中\n<ul>\n<li>如何进行布局</li>\n<li>如何进行定位</li>\n<li>区域内元素的相互关系和相互作用</li>\n<li>并且这个特殊的区域不受外界影响</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>上面提到了 block box 的概念，<strong></strong></li>\n<li>顺便插一个问题：还知道其他哪些 box 类型呢？\n<ul>\n<li>相应地，<strong></strong></li>\n</ul>\n</li>\n</ul>",r:{minutes:4.83,words:1448},t:"BFC 背后的布局问题",O:1,y:"a"}}],["/knowledge/frontEnd/css/cssCenter.html",{loader:()=>i.e(7288).then(i.bind(i,9188)),meta:{d:17235072e5,l:"2024年8月13日",c:["CSS3"],e:'<ul>\n<li>「实现居中」也是一道必考题</li>\n<li>参考代码：</li>\n</ul>\n<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">\t.wp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\tborder: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66"> solid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\twidth: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">300</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\theight: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">300</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">\t.box</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\tbackground: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">green</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">\t.box.fixed-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\twidth: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\theight: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">px</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"wp"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"box fixed-size"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;text&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.43,words:729},t:"多种方式实现居中",O:2,y:"a"}}],["/knowledge/frontEnd/css/cssModules.html",{loader:()=>i.e(7488).then(i.bind(i,4049)),meta:{d:17234208e5,l:"2024年8月12日",c:["CSS3"],g:["CSS Modules"],e:"<ul>\n<li>面试官除了对 CSS 的考察除了基础布局和经验以外，还非常喜欢问 CSS 工程相关的题目，比如：\n<ul>\n<li><strong>如何维护大型项目的 z-index</strong></li>\n<li><strong>如何维护 CSS 选择器和样式之间的冲突</strong></li>\n</ul>\n</li>\n</ul>\n<h3>什么是 CSS Modules</h3>\n<ul>\n<li>CSS Modules 是指：\n<ul>\n<li><strong>项目中所有 class 名称默认都是局部起作用的</strong></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>其实，CSS Modules 并不是一个官方规范，更不是浏览器的机制</p>\n</blockquote>",r:{minutes:4.42,words:1325},t:"CSS Modules 理论和实战",O:4,y:"a"}}],["/knowledge/frontEnd/css/cssVariable.html",{loader:()=>i.e(9325).then(i.bind(i,143)),meta:{d:17234208e5,l:"2024年8月12日",c:["CSS3"],g:["CSS Variable"],e:'<ul>\n<li>CSS 变量或者 CSS 自定义属性一直以来是一个值得关注的方向</li>\n<li>我们前端没必要去「叫嚣」 CSS - HTML 是否图灵完备，但是 CSS 变量时代确实已经到来</li>\n</ul>\n<div class="hint-container warning">\n<p class="hint-container-title">注意</p>\n<p>注意这里所说的不是 CSS 预处理器（类似 Less，Sass）中的变量，而是实实在在的原生支持特性</p>\n</div>\n<h3>什么是 CSS 变量</h3>\n<ul>\n<li>什么是 CSS 变量呢？直接来看实例，有代码：</li>\n</ul>',r:{minutes:2.22,words:665},t:"CSS 变量和主题切换优雅实现",O:3,y:"a"}}],["/knowledge/frontEnd/css/responsiveLayoutAndBootstrap.html",{loader:()=>i.e(1869).then(i.bind(i,997)),meta:{d:17234208e5,l:"2024年8月12日",c:["CSS3"],g:["响应式布局"],e:"<ul>\n<li>响应式这个概念曾经非常流行，但从发展来看，似乎「响应式」布局不再是一个必不可少的话题</li>\n<li>究其原因我认为主要有以下几点：\n<ul>\n<li>公司研发人力越来越充足，PC 端、移动端可以实现两套布局，分项目维护</li>\n<li>响应式布局适配越来越简单</li>\n</ul>\n</li>\n<li>但是响应式布局仍然有其存在的 <strong></strong>：\n<ul>\n<li>移动端碎片化的现象将会无限期存在</li>\n<li>前端也必然进入物联网，任何设备界面的响应布局将会成为关键挑战</li>\n<li>除此之外，响应式布局也体现了 CSS 的灵活和发展</li>\n</ul>\n</li>\n</ul>",r:{minutes:13.57,words:4072},t:"响应式布局和 Bootstrap 的实现分析",O:5,y:"a"}}],["/knowledge/frontEnd/engineering/codeSpecification.html",{loader:()=>i.e(8840).then(i.bind(i,7811)),meta:{d:16320096e5,l:"2021年9月19日",e:'<figure><img src="https://s21.ax1x.com/2024/09/21/pAM8Elj.webp" alt="示意图" width="600" height="296" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>\n<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<ul>\n<li>不管是团队的扩张还是业务的发展，都会导致项目代码量出现爆炸式增长</li>\n<li>为了防止「野蛮生长」现象，我们需要有一个良好的技术选型和成熟的架构做支撑，也需要团队中每一个开发者都能用心维护项目</li>\n<li>在此方向上除了人工 code review 以外，相信大家对于一些规范工具并不陌生</li>\n<li>作为一名前端工程师，在使用现代化工具的基础上，<strong></strong></li>\n</ul>\n</div>',r:{minutes:17.88,words:5363},t:"代码规范工具及背后技术设计",O:4,y:"a"}}],["/knowledge/frontEnd/engineering/module.html",{loader:()=>i.e(1324).then(i.bind(i,9052)),meta:{d:16265664e5,l:"2021年7月18日",e:"<ul>\n<li><strong>模块化是工程化的基础</strong>：只有能将代码模块化，拆分为合理单元，才具备调度整合的能力，才有架构和工程一说</li>\n<li>早期，JavaScript 只是作为浏览器端脚本语言出现，只负责简单的页面交互，并不具备先天的模块化能力</li>\n<li>随着 Node.js 的发展和 ES 的演进，模块化如今在前端领域早已经不新鲜，但是，对于模块化不应该只停留在了解、会用的基础上，还要深入其中，认识在这个演进过程中：\n<ul>\n<li>模块化经历了怎样的发展历程，从中能学习到哪些知识？</li>\n<li>跟其他早已发展成熟的语言相比，JavaScript 语言的模块化又有哪些特点？</li>\n<li>新的模块化 feature 又有哪些？dynamic import 现在停留在哪个阶段？</li>\n</ul>\n</li>\n<li>知识点如下：</li>\n</ul>",r:{minutes:15.72,words:4717},t:"深入浅出模块化（含 tree shaking）",O:1,y:"a"}}],["/knowledge/frontEnd/engineering/projectOrganizationDesign.html",{loader:()=>i.e(6398).then(i.bind(i,6024)),meta:{d:16298496e5,l:"2021年8月25日",e:'<figure><img src="https://s21.ax1x.com/2024/09/21/pAM3v6A.webp" alt="示意图" width="600" height="380" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>\n<h2>大型前端项目的组织设计</h2>\n<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<ul>\n<li>随着业务复杂度的直线上升，前端项目不管是从代码量上，还是从依赖关系上都爆炸式增长</li>\n<li>同时，团队中一般不止有一个业务项目，多个项目之间如何配合，如何维护相互关系？</li>\n<li>公司自己的公共库版本如何管理？</li>\n</ul>\n</div>',r:{minutes:21.96,words:6589},t:"前端工程化背后的项目组织设计",O:3,y:"a"}}],["/knowledge/frontEnd/engineering/webpack.html",{loader:()=>i.e(2137).then(i.bind(i,8187)),meta:{d:16287264e5,l:"2021年8月12日",e:"<ul>\n<li>说起前端工程化，webpack 必然在前端工具链中占有最重要的地位\n<ul>\n<li>从原始的刀耕火种时代，到 Gulp、Grunt 等早期方案的横空出世</li>\n<li>再到 webpack 通过其丰富的功能和开放的设计一举奠定「江湖地位」</li>\n<li>我想每个前端工程师都需要熟悉各个时代的「打包神器」</li>\n</ul>\n</li>\n<li>作为团队中不可或缺的高级工程师\n<ul>\n<li>能否玩转 webpack</li>\n<li>能否通过工具搭建令人舒适的工作流和构建基础</li>\n<li>能否不断适应技术发展打磨编译体系，将直接决定你的工作价值</li>\n<li><strong></strong></li>\n</ul>\n</li>\n<li>webpack 主题的知识点如下所示：</li>\n</ul>",r:{minutes:31.24,words:9372},t:"webpack 工程师 > 前端工程师",O:2,y:"a"}}],["/knowledge/frontEnd/frame/frameAnalogy.html",{loader:()=>i.e(862).then(i.bind(i,6731)),meta:{d:16888608e5,l:"2023年7月9日",e:'<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<p>框架在任何一种语言编程范畴中都扮演了举足轻重的地位，前端尤是如此<br>\n在精力有限的情况下，如何做到「触类旁通」、如何提取框架共性、提高学习和应用效率呢？</p>\n</div>\n<ul>\n<li>相关知识点如下：</li>\n</ul>\n<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/Frame/01.png" alt="示意图" width="500" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>',r:{minutes:21.27,words:6380},t:"触类旁通各种框架",O:1,y:"a"}}],["/knowledge/frontEnd/frame/frameIsomorphic.html",{loader:()=>i.e(1916).then(i.bind(i,5715)),meta:{d:16900704e5,l:"2023年7月23日",e:"<ul>\n<li>不管是服务端渲染还是服务端渲染衍生出的同构应用，现在来看已经并不新鲜了，实现起来也并不困难。可是有的开发者认为：同构应用不就是调用一个 renderToString（React 中）类似的 API 吗？</li>\n<li>讲道理确实是这样的，但是讲道理你也许并没有真正在实战中领会同构应用的精髓。</li>\n<li>同构应用能够完成的本质条件是虚拟 DOM，基于虚拟 DOM 我们可以生成真实的 DOM，并由浏览器渲染；也可以调用不同框架的不同 APIs，将虚拟 DOM 生成字符串，由服务端传输给客户端。</li>\n<li>但是同构应用也不只是这么简单。拿面试来说，同构应用的考察点不是“纸上谈兵”的理论，而是实际实施时的细节。这一讲我们就来聊一聊“同构应用中往往被忽略的细节”，需要读者提前了解服务端渲染和同构应用的概念。</li>\n<li>相关知识点如下：</li>\n</ul>",r:{minutes:13.42,words:4025},t:"同构应用中你所忽略的细节",O:6,y:"a"}}],["/knowledge/frontEnd/frame/frameStudy.html",{loader:()=>i.e(7732).then(i.bind(i,828)),meta:{d:1690416e6,l:"2023年7月27日",e:"<ul>\n<li>我记得作为实习生时，第一个独立前端项目是为欧洲天然气石油系统做一个计费应用：在地图上，用户可以和地图交互，从欧亚大陆任何一个石油气点为起点，到任何一个石油气点作为终点，计算出沿途所有的路径运输方案以及计费详情，还要支持各种终端的查询以及打印，这是一个纯 JavaScript 单页面应用 - Severless 的项目。</li>\n<li>实习期满离职前我进行复盘：繁多的原生 JavaScript APIs 让我无语，兼容性让我崩溃，“如果我一开始就选用 jQuery 做该多好！” ，too young too simple。这时候再让我复盘，“jQuery 也不适用那样一个单页应用，我为什么不用 React 或者 Vue？”果然 sometimes naive。</li>\n<li>前端框架确实一直在演进、发展，那么框架除了简化我们的操作外，我们还能从中学到什么？这一讲，我就对这个开放性话题进行展开。本节课内容比较轻松，没有大量的代码案例，让我们来舒缓一下，但请读者在阅读时始终思考——“从框架和类库，我们该学到什么”这一问题。</li>\n<li>Vue 和 React 加其生态方案使得 Vue 和 React 不再是单纯的视图层类库，因此下面我们将 Vue 和 React 统称“框架”，表示其全家桶。</li>\n<li>相关知识点如下：</li>\n</ul>",r:{minutes:10.51,words:3152},t:"从框架和类库，我们该学到什么",O:7,y:"a"}}],["/knowledge/frontEnd/html/html5Mobile.html",{loader:()=>i.e(6320).then(i.bind(i,6618)),meta:{d:17234208e5,l:"2024年8月12日",c:["HTML5"],e:'<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<p>HTML5 因为其强大先进的能力，毫无疑问打来了一场开发的变革，在国内，体现最明显的就是各种 H5 移动页面\n因为移动端的碎片化现象，以及技术落地的成熟度尚浅，造成了不少问题，那么移动端开发 H5 有哪些坑以及小技巧呢？</p>\n</div>\n<h3>打电话发短信写邮件的小技巧</h3>\n<ul>\n<li>这些技巧都和 a 标签相关，其中打电话：</li>\n</ul>\n<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"tel: 110"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;打电话给警察局&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:2.93,words:880},t:"移动端 H5 注意事项总结",O:3,y:"a"}}],["/knowledge/frontEnd/html/html5Tag.html",{loader:()=>i.e(6948).then(i.bind(i,65)),meta:{d:17234208e5,l:"2024年8月12日",c:["HTML5"],e:'<ul>\n<li>HTML5 给开发者提供了哪些便利呢？简单列举有：\n<ul>\n<li>用于绘画的 canvas 元素</li>\n<li>用于媒介播放的 video 和 audio 元素</li>\n<li>对本地离线存储更好的支持（localStorage、sessionStorage）</li>\n<li>新的语义化标签（article、footer、header、nav、section…)</li>\n<li>新的表单控件（calendar、date、time、email、url、search…)</li>\n</ul>\n</li>\n</ul>\n<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<p>除了这些常规的之外，还有以下一些可交互性标签</p>\n</div>',r:{minutes:1.21,words:364},t:"进击的 HTML5",O:1,y:"a"}}],["/knowledge/frontEnd/html/htmlSemanticization.html",{loader:()=>i.e(8761).then(i.bind(i,6341)),meta:{d:17235072e5,l:"2024年8月13日",c:["HTML5"],e:"<ul>\n<li>HTML5 语义化——这个概念其实诞生了挺长时间，经常发现在面试 JD（Job Description） 中出现要求候选者「了解 HTML5 语义化」、「对 HTML5 语义化有深刻认知」的需求</li>\n<li>对于这么一句 JD 范式标配，如果面试官真的问起，该如何回答呢？</li>\n</ul>\n<h3>语义化是什么、为什么、怎么做</h3>\n<ul>\n<li>简单来说，HTML 语义化就是：\n<ul>\n<li><strong></strong></li>\n</ul>\n</li>\n<li>那么为什么要做到语义化呢？\n<ul>\n<li>直观上很好理解，「合适的标签」是内容表达的高度概括，这样浏览器爬虫或者任何机器在读取 HTML 时，都能更好地理解，进而解析效率更高</li>\n<li>这样带来的 <strong></strong> 如下：\n<ul>\n<li>有利于 SEO</li>\n<li>开发维护体验更好</li>\n<li>用户体验更好（如使用 alt 标签用于解释图片信息）</li>\n<li>更好的 accessibility，方便任何设备解析（如盲人阅读器）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>那么如何做到语义化呢？\n<ul>\n<li>实时跟进、学习并使用语义化标签</li>\n</ul>\n</li>\n</ul>",r:{minutes:2.83,words:849},t:"如何理解 HTML5 语义化",O:2,y:"a"}}],["/knowledge/frontEnd/javascript/api.html",{loader:()=>i.e(4988).then(i.bind(i,5427)),meta:{d:17221248e5,l:"2024年7月28日",c:["JavaScript"],e:'<blockquote>\n<p>实现一个 API，除了可以考察面试者对这个 API 的理解，更能体现开发者的编程思维和代码能力</p>\n</blockquote>\n<h2>主题的相关知识点如下</h2>\n<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/JavaScript/18.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>\n<h2>jQuery offset 实现</h2>',r:{minutes:14.92,words:4477},t:"我们不背诵 API，只实现 API",O:3,y:"a"}}],["/knowledge/frontEnd/javascript/asynchronous.html",{loader:()=>i.e(5206).then(i.bind(i,2843)),meta:{d:1722816e6,l:"2024年8月5日",c:["JavaScript"],e:"<ul>\n<li>\n<p><strong>理论方面</strong></p>\n<ul>\n<li>我们知道 JavaScript 是单线程的，那它又是如何实现异步的呢？</li>\n<li>在这个环节中，浏览器或 NodeJS 又起到了什么样的作用？</li>\n<li>什么是宏任务，什么是微任务？</li>\n</ul>\n</li>\n<li>\n<p><strong>实践上</strong></p>\n<ul>\n<li>从 callback 到 promise，从 generator 到 async/await，到底应该如何更优雅地实现异步操作？</li>\n</ul>\n</li>\n<li>\n<p>相关知识点如下：</p>\n</li>\n</ul>",r:{minutes:21.93,words:6578},t:"异步不可怕「死记硬背」- 实践拿下",O:4,y:"a"}}],["/knowledge/frontEnd/javascript/closure.html",{loader:()=>i.e(341).then(i.bind(i,1147)),meta:{d:1700352e6,l:"2023年11月19日",c:["JavaScript"],e:'<ul>\n<li>闭包是 JavaScript 中最基本也是最重要的概念之一，可是闭包又绝对不是一个单一的概念</li>\n<li>它涉及作用域、作用域链、执行上下文、内存管理等多重知识点</li>\n</ul>\n<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/JavaScript/02.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>\n<h2>基本知识</h2>\n<h3>1. 作用域</h3>',r:{minutes:19.94,words:5983},t:"老司机也会在闭包相关知识点翻车",O:2,y:"a"}}],["/knowledge/frontEnd/javascript/es6Next.html",{loader:()=>i.e(363).then(i.bind(i,4817)),meta:{d:1722816e6,l:"2024年8月5日",c:["JavaScript"],e:"<ul>\n<li>JavaScript 语言规范始终在与时俱进，除了过于激进的 ES4 被“废除”之外，ES Next 始终茁壮发展</li>\n<li>到如今，TC39（Technical Committee 39，JavaScript 委员会）已经明确表示每年更新一个版本，因此使用 ES Next 表示那些“正在演进、正在发展”的新特性集</li>\n<li>作为前端开发者，我们该如何看待每年一版的 ES Next，又该如何去保持学习呢？</li>\n<li>我认为列举新特性没有价值，这些东西随处可见，更重要的是分析新特性的由来，剖析如何学习新特性，分析如何利用新特性</li>\n<li>相关知识点如下：</li>\n</ul>",r:{minutes:19.84,words:5953},t:"究竟该如何学习与时俱进的 ES Next",O:7,y:"a"}}],["/knowledge/frontEnd/javascript/objectPrototype.html",{loader:()=>i.e(6771).then(i.bind(i,6964)),meta:{d:1722816e6,l:"2024年8月5日",c:["JavaScript"],e:"<ul>\n<li>「对象」——这个概念在编程中非常重要，任何语言和领域的开发者都应该具有面向对象思维，能够有效运用对象\n<ul>\n<li>良好的面向对象系统设计将是应用强健性、可维护性和可扩展性的关键</li>\n<li>反之，如果面向对象环节有失误，那么将是项目的灾难</li>\n</ul>\n</li>\n<li>说到 JavaScript 面向对象，它实质是基于原型的对象系统，而不是基于类的，这是由设计之初所决定的，是基因层面的\n<ul>\n<li>随着 ES Next 标准的进化和新特性的添加，使得 JavaScript 面向对象更加贴近其他传统面向对象型语言</li>\n<li>有幸目睹语言的发展和变迁，伴随着某个语言的成长，我认为是开发者之幸</li>\n</ul>\n</li>\n<li>这回让我们深入对象和原型，理解 JavaScript 在这个方向上的能力</li>\n<li>相关知识点如下：</li>\n</ul>",r:{minutes:15.58,words:4675},t:"面向对象和原型——永不过时的话题",O:6,y:"a"}}],["/knowledge/frontEnd/javascript/other.html",{loader:()=>i.e(3558).then(i.bind(i,2240)),meta:{d:17230752e5,l:"2024年8月8日",e:'<ul>\n<li>我们已经梳理了 JavaScript 当中 this、执行上下文、作用域、闭包、几个 APIs 实现等基础内容</li>\n<li>除了以上罗列的概念外，在 JavaScript 中还存在一些较为「细小」，却至关重要的概念和细节，这些内容看似零碎，但它们是 JavaScript 基础拼图的重要环节，是代码的基本单元，甚至在面试中也是单独的考察点</li>\n<li>我们将对这些「其他」内容进行梳理，主要关键字包括：类型（类型判断，类型转换，源码分析等），函数参数引用，相关面试题目分析等</li>\n<li>如图：</li>\n</ul>\n<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/JavaScript/32.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>',r:{minutes:12.44,words:3732},t:"其他基础题库",O:8,y:"a"}}],["/knowledge/frontEnd/javascript/promise.html",{loader:()=>i.e(7729).then(i.bind(i,3358)),meta:{d:1722816e6,l:"2024年8月5日",c:["JavaScript"],e:"<ul>\n<li>我们认识到：想优雅地进行异步操作，必须要熟识一个极其重要的概念 —— Promise</li>\n<li>它是取代传统回调，实现同步链式写法的解决方案，是理解 generator、async/await 的关键</li>\n<li>但是 Promise 对于初学者来说，并不是很好理解，其中的概念纷杂，且抽象程度较高</li>\n<li>与此同时，在中高级前端开发面试当中，对于 Promise 的考察也多种多样，近几年流行“让开发者实现一个 Promise”</li>\n<li>那么如何实现一个简单的 Promise</li>\n<li>注意：<strong>实现不是最终目的，在实现的过程中，以关键结论和关于 Promise 的考察题目来融会贯通</strong></li>\n</ul>",r:{minutes:24.91,words:7473},t:"你以为我真的想让你手写 Promise 吗",O:5,y:"a"}}],["/knowledge/frontEnd/javascript/this.html",{loader:()=>i.e(5066).then(i.bind(i,1902)),meta:{d:17000928e5,l:"2023年11月16日",c:["JavaScript"],e:'<figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/JavaScript/01.png" alt="示意图" width="700" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>\n<h2>this 到底指向谁</h2>\n<blockquote>\n<p><strong></strong></p>\n</blockquote>\n<ul>\n<li>有一种广泛流传的说法是：谁调用它，this 就指向谁，this 的指向是在调用时确定的</li>\n</ul>',r:{minutes:9.49,words:2848},t:"一网打尽 this，对执行上下文说 Yes",O:1,y:"a"}}],["/knowledge/frontEnd/performanceOptimization/monitorAndError.html",{loader:()=>i.e(421).then(i.bind(i,5141)),meta:{d:16443648e5,l:"2022年2月9日",e:'<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<ul>\n<li>性能始终是前端领域非常重要的话题，它直接决定了产品体验的优劣，重要性无需赘言</li>\n<li>我们在体验一个产品时，能够直观感受到其性能，可是如何量化衡量性能的好坏呢？</li>\n<li>同时，我们无法保证程序永远不出问题，如何在程序出现问题时及时获得现场数据、还原现场，以做出准确地响应呢？</li>\n</ul>\n</div>\n<ul>\n<li>离开了实际场景谈这些话题都是「耍流氓」，性能数据的监控、错误信息的收集和上报应该都要基于线上真实环境，这对于我们随时掌控线上产品，优化应用体验具有重大意义</li>\n<li>现在就聚焦在性能监控和错误收集与上报系统上，通过学习，做到不仅能够分析性能数据、处理错误，还能建设一个成熟的配套系统</li>\n<li>主要知识点：</li>\n</ul>',r:{minutes:27.32,words:8196},t:"性能监控和错误收集与上报",O:1,y:"a"}}],["/knowledge/frontEnd/performanceOptimization/problems.html",{loader:()=>i.e(7264).then(i.bind(i,3906)),meta:{d:16455744e5,l:"2022年2月23日",e:"<ul>\n<li>一直以来，性能优化是前端的重要课题，不仅实实在在影响产品性能，在面试环节也会被反复提及。无论应聘者是初入前端的新手，还是工作经验丰富的老司机，面试官都能在性能方面找到合适的切入点，对候选人进行考察。作为程序员，应该如何在平时学习、工作中积累性能优化方面的经验，保障产品顺畅体验？作为面试者，如何在面试流程中出色地回答性能相关问题？</li>\n<li>**前端性能是一个太过宽泛的话题，脱离场景和需求谈性能往往毫无意义。**我相信很少有面试官会直接把：「前端如何优化性能？」——这样一个空架子问题抛出的。也不会有技术经理直接丢给你「把产品性能提升一些」这样的项目。毕竟这样的问题过大，根本让人无处下手。我们还需要针对具体场景和瓶颈来分析。</li>\n<li>但是，如果真的有面试官这么问了呢？</li>\n<li>如果是我，我也许会这样回答：</li>\n<li>前端性能涉及方方面面，优化角度切入点都有所不同。我认为，主要可以分为：页面工程优化和代码细节优化两大方向。</li>\n<li><strong>页面工程优</strong>化从页面请求开始，涉及网络协议、资源配置、浏览器性能、缓存等；<strong>代码细节优化</strong>上相对零散，比如 JavaScript 对 DOM 操作，宿主环境的单线程相关内容等。</li>\n<li>也正如上所答，本节课程也会基于以下两个大方向的相关知识进行梳理：\n<ul>\n<li>页面工程优化</li>\n<li>代码细节优化</li>\n</ul>\n</li>\n<li>为了更好地还原真实场景，这两方面我都将配合两类面试题目来解析：\n<ul>\n<li>开放例题实战</li>\n<li>代码例题实战</li>\n</ul>\n</li>\n<li>这个主题的知识点如下：</li>\n</ul>",r:{minutes:20.31,words:6094},t:"性能优化问题，老司机如何解决",O:2,y:"a"}}],["/knowledge/frontEnd/performanceOptimization/reactFrame.html",{loader:()=>i.e(7028).then(i.bind(i,3952)),meta:{d:17263584e5,l:"2024年9月15日",e:"<ul>\n<li>在上一节课中，我们提到了性能优化。在这个话题上，除了工程化层面的优化和语言层面的优化以外，框架性能也备受瞩目。这一节课，我们就来聊聊框架的性能话题，并以 React 为例进行分析。</li>\n<li>主要知识点如下：</li>\n</ul>\n<h2>框架性能到底指什么</h2>\n<ul>\n<li>说起框架的性能话题，很多读者可能会想到「不要过早地做优化」这条原则。实际上，大部分应用的复杂度并不会对性能和产品体验构成挑战。毕竟在之前课程中我们学习到，现代化的框架凭借高效的虚拟 DOM diff 算法和（或）响应式理念，以及框架内部引擎，已经做得较为完美了，一般项目需求对性能的压力并不大。</li>\n<li>但是对于一些极其复杂的需求，性能优化是无法回避的。如果你开发的是图形处理应用、DNA 检测实验应用、富文本编辑器或者功能丰富的表单型应用，则很容易触碰到性能瓶颈。同样，作为框架的使用者，也需要对性能优化有所了解，这对于理解框架本身也是有很大帮助的。</li>\n<li>前端开发自然离不开浏览器，而性能优化大都在和浏览器打交道。我们知道，页面每一帧的变化都是由浏览器绘制出来的，并且这个绘制频率受限于显示器的刷新频率，因此一个重要的性能数据指标是每秒 60 帧的绘制频率。这样进行简单的换算之后，每一帧只有 16.6ms 的绘制时间。</li>\n<li>如果一个应用对用户的交互响应处理过慢，则需要花费很长的时间来计算更新数据，这就造成了应用缓慢、性能低下的问题，被用户感知造成极差的用户体验。对于框架来说，以 React 为例，开发者不需要额外关注 DOM 层面的操作。因为 React 通过维护虚拟 DOM 及其高效的 diff 算法，可以决策出每次更新的最小化 DOM batch 操作。但实际上，使用 React 能完成的性能优化，使用纯原生的 JavaScript 都能做到，甚至做得更好。只不过经过 React 统一处理后，大大节省了开发成本，同时也降低了应用性能对开发者优化技能的依赖。</li>\n<li>因此现代框架的性能表现，除了想办法缩减自身的 bundle size 之外，主要优化点就在于框架本身运行时对 DOM 层操作的合理性以及自身引擎计算的高效性。这一点我们会通过两节课程来慢慢展开。</li>\n</ul>",r:{minutes:26.31,words:7893},t:"以 React 为例，说说框架和性能",O:3,y:"a"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/algorithms.html",{loader:()=>i.e(461).then(i.bind(i,6192)),meta:{d:162e10,l:"2021年5月3日",e:"<p>在上一讲中，我们全面梳理了重要的数据结构，并用 JavaScript 对各种数据结构进行了实现和方法模拟。数据结构常与算法一起出现，两者相互依存密不可分。这一讲，我们来研究一下「那些年常考的前端算法」。</p>\n<p>主要内容如下：</p>\n<p>我们将通过三讲的内容来剖析算法问题。本讲先「轻松」一下，主要介绍前端和算法的关系，以及算法中的一些基本概念。</p>\n<h2>前端和算法</h2>\n<p>前端和算法有什么关系呢？我想先纠正两个常见的错误认知。</p>\n<h3>关于算法的误解</h3>\n<ul>\n<li>前端没有算法？</li>\n</ul>\n<p>「前端没有算法」这种说法往往出自算法岗甚至后端读者，这种认知是错误的。前端不仅有算法，而且算法在前端开发中占据的地位也越来越重要。我们常提到的 Virtual dom diff、webpack 实现、React fiber、React hooks、响应式编程、浏览器引擎工作方式等都有算法的影子。在业务代码中，哪怕写一个抽奖游戏，写一个混淆函数都离不开算法。</p>",r:{minutes:54.7,words:16410},t:"那些年常考的前端算法",O:4,y:"a"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/dataStructure.html",{loader:()=>i.e(3346).then(i.bind(i,2069)),meta:{d:16184448e5,l:"2021年4月15日",e:"<ul>\n<li>数据结构是计算机中组织和存储数据的特定方式，它的目的是方便且高效地对数据进行访问和修改。数据结构表述了数据之间的关系，以及操作数据的一系列方法。数据又是程序的基本单元，因此无论是哪种语言、哪种领域，都离不开数据结构；另一方面，数据结构是算法的基础，其本身也包含了算法的部分内容。也就是说，想要掌握算法，先有一个巩固的数据结构基础是必要条件。</li>\n<li>前端领域也到处体现着数据结构的应用，尤其是随着需求的复杂度上升，前端工程师越来越离不开数据结构。React、Vue 这些设计精巧的框架，在线文档编辑系统、大型管理系统，甚至一个简单的检索需求，都离不开数据结构的支持。是否能够掌握这个难点内容，将是进阶的重要考量。我们应该如何学习数据结构呢？</li>\n<li>下图是本讲内容的提纲。</li>\n</ul>",r:{minutes:35.45,words:10635},t:"剖析无处不在的数据结构",O:2,y:"a"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/designPattern.html",{loader:()=>i.e(1835).then(i.bind(i,3682)),meta:{d:16177536e5,l:"2021年4月7日",e:'<div class="hint-container info">\n<p class="hint-container-title">相关信息</p>\n<p>维基百科对设计模式的定义为：</p>\n<ul>\n<li>在软件工程中，设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案</li>\n<li>这个术语是由埃里希·伽玛（Erich Gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的</li>\n<li>设计模式并不是直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案</li>\n</ul>\n</div>\n<ul>\n<li>首先从设计模式的概念可以看出：这是一套理论，干巴巴的描述其所有内容并没有太大意义</li>\n<li>设计模式一般认为有 23 种，<strong></strong></li>\n<li>那么对于 JavaScript 或者前端开发来说，设计模式似乎是一个有些遥远的概念，应该如何了解并学习设计模式呢？\n<ul>\n<li><strong></strong></li>\n</ul>\n</li>\n<li>相关知识点如下：</li>\n</ul>',r:{minutes:21.55,words:6465},t:"揭秘前端设计模式",O:1,y:"a"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/function.html",{loader:()=>i.e(9443).then(i.bind(i,9597)),meta:{d:16194816e5,l:"2021年4月27日",e:"<ul>\n<li>函数式这个概念我们在以往的课程中其实已经有所涉及了，比如第 1-2、1-3 课介绍的闭包知识；比如 1-4 课《我们不背诵 API，只实现 API》中剖析的 5 种 compose 方法，以及 reduce 实现 pipe、runPromiseInSequence 等都是典型的函数式概念。</li>\n<li>函数式其实很早就出现在了编程领域当中，近些年由于 React 的带动，在前端开发中重新「焕发活力」。</li>\n<li>很多读者可能一听到函数式就眉头一皱，毕竟相比于面向对象等其他编程概念，它更加晦涩难懂。对于函数式的学习，也一定不是使用或者模仿 compose 那么简单。这一节课，我们就来梳理几个函数式概念。但是我认为单纯的概念介绍并没有意义，因此也准备了大量实战例题以及库的设计方案，与大家一起分享。</li>\n</ul>",r:{minutes:16.44,words:4933},t:"古老又新潮的函数式",O:3,y:"a"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/wx.html",{loader:()=>i.e(7056).then(i.bind(i,107)),meta:{d:16213824e5,l:"2021年5月19日",e:'<p>前一段时间，一道疑似「微信」招聘的面试题出现，可能有不少读者已经了解过了。这道题乍一看挺难，但是细细分析却还算简单，我们甚至可以用多种手段解题，用不同思想来给出答案。</p>\n<p>网上零零碎碎的有一些解答，但是缺乏全面梳理。我认为通过这道题，有必要将前端多重知识点「融会贯通」，在这里和大家分享。</p>\n<p>本讲知识点如下：</p>\n<h2>题意分析</h2>\n<p>我们来先看看题目：</p>\n<p>实现一个 LazyMan，按照以下方式调用时，得到相关输出：</p>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">LazyMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hank"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hi! This is Hank!</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">LazyMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hank"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"dinner"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hi! This is Hank!</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 等待 10 秒..</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Wake up after 10</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Eat dinner~</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">LazyMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hank"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"dinner"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"supper"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hi This is Hank!</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Eat dinner~</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Eat supper~</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">LazyMan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hank"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleepFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">eat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"supper"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 等待 5 秒</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Wake up after 5</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Hi This is Hank!</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// Eat supper</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:16.04,words:4813},t:"分析一道「微信」面试题",O:5,y:"a"}}],["/knowledge/interview/css/",{loader:()=>i.e(6689).then(i.bind(i,3228)),meta:{d:1732251337e3,c:["面试"],g:["CSS"],e:"<h3>盒模型</h3>\n<blockquote>\n<p>题目：简述 CSS 的盒模型</p>\n</blockquote>\n<ul>\n<li>CSS 的盒模型主要包括以下两种，可通过 <strong></strong> 属性进行配置：\n<ul>\n<li><strong>content-box</strong>：默认属性，width 只包含 content</li>\n<li><strong>border-box</strong>：width 包含 (content、padding、border)</li>\n</ul>\n</li>\n</ul>\n<h3>CSS specificity (权重)</h3>",r:{minutes:4.12,words:1237},t:"CSS 面试重点",y:"a"}}],["/knowledge/frontEnd/frame/react/reactComponentDesign.html",{loader:()=>i.e(2314).then(i.bind(i,3630)),meta:{d:16785792e5,l:"2023年3月12日",e:'<ul>\n<li>组件不是 React 特有的概念，但是 React 将组件化的思想发扬光大，可谓用到了极致</li>\n<li>良好的组件设计会是良好的应用开发基础，这一讲就让我们谈一谈组件设计的奥秘</li>\n<li>相关知识点如下：</li>\n</ul>\n<figure><img src="https://cdn.nlark.com/yuque/0/2024/webp/22361634/1723549296606-aebab544-b39a-4c9a-942e-f47f4c75a6bf.webp" alt="示意图" tabindex="0" loading="lazy"><figcaption>示意图</figcaption></figure>',r:{minutes:12.99,words:3896},t:"揭秘 React 真谛：组件设计",O:3,y:"a"}}],["/knowledge/frontEnd/frame/react/reactNowAndFuture.html",{loader:()=>i.e(1997).then(i.bind(i,6098)),meta:{d:1680048e6,l:"2023年3月29日",e:"<ul>\n<li>React 自推出以来，一直进行着自身完善和演进。作为 React 开发者或前端开发者，有幸见证着一个伟大「框架」的成长，是非常幸运的。那么在这个过程中，我们应该学些什么？React 现在处于什么发展阶段？React 未来又将有哪些规划？</li>\n<li>高级前端工程师不能只停留在使用框架上，我们自然要思考上述这些问题。这一讲我们就来聊聊 React 的现状与未来，如果不熟悉 React，也并不妨碍大家阅读。</li>\n<li>相关知识点如下：</li>\n</ul>\n<h2>React 现状分析</h2>\n<ul>\n<li>React 经过几年的打磨，目前维持了一个稳定的迭代周期，并不断给开发者带来惊喜。其中难能可贵的是在 breaking changes 不多的前提下，仍在持续输出具有变革精神的特性，保持着旺盛的生命力。不管是什么平台的调查，都显示 React 受众仍然最多，可以预见的是，React 未来仍将会统领前端发展。</li>\n<li>关于 React 现状，我总结出以下几个特点：\n<ul>\n<li>开发模式已经定型，有利于开发者持续学习</li>\n<li>仍然有强大的开发团队维护，不断带来改变，这些改变一方面使 React 更好，另一方面甚至推动了 JavaScript 语言的发展</li>\n<li>社区生态强大，有一系列解决方案，数据状态管理、组件库、服务端渲染生态群百花齐放</li>\n</ul>\n</li>\n<li>在这些特点的背后，也有一些让开发者担忧的地方：\n<ul>\n<li>概念越来越多。一定程度上，新老概念并存，学习曲线激增</li>\n<li>存在较多 unsafe_ 标记的 APIs，始终担忧彻底废弃相关 APIs 那一天的到来</li>\n<li>新特性带来了较多「魔法」，也带来了一些困惑</li>\n</ul>\n</li>\n<li>当然，这些让开发者担忧的地方并不足以和 React 的强大相提并论，这些「问题」甚至在任何一个框架中都会存在。因此，我建议不管是工作需要，还是自身学习需要，前端开发者都可以使用并研究 React。</li>\n<li>从 React Component 看 React 发展史</li>\n<li>回顾 React 发展历史，很多 APIs 和特性的演进都很有意思，比如 refs、context，其中任何一点都值得单拎出来深入分析。但是我挑选了一个开发者一定会使用的 React Component 话题：从组件的创建和声明方式，我们来看一个框架的变革，并由此引出 React 目前最受关注的的 hooks 新特性。</li>\n<li>React Component 的发展主要经历了三个阶段：\n<ul>\n<li>createClass 创建组件时期</li>\n<li>ES class 声明组件时期</li>\n<li>无状态（函数式）组件 - React hooks 时期</li>\n</ul>\n</li>\n<li>这一路，也是 React 从一个纯粹的视图层类库走向成熟完善的解决方案的过程。我们逐一来看。</li>\n</ul>",r:{minutes:14.23,words:4270},t:"React 的现状与未来",O:5,y:"a"}}],["/knowledge/frontEnd/frame/react/reactStatus.html",{loader:()=>i.e(7933).then(i.bind(i,3187)),meta:{d:16792704e5,l:"2023年3月20日",e:"\x3c!-- \n- 如果说组件是 React 应用的骨骼，那么数据就是 React 应用的血液，单向数据流就像血液在应用体中穿梭\n- 处理数据向来不是一件简单的事情，良好的数据状态管理不仅需要经验的积累，更是设计能力的反应\n- 目前来看 Redux 无疑能够将数据状态理清，与此同时 Vue 阵营模仿 Redux 的 Vuex 也起到了相同的效果\n- 这一讲我们就来谈谈数据状态管理，了解 Redux 的真谛，并分析其利弊和上层解决方案\n- 相关知识点如下：\n\n![示意图](https://cdn.nlark.com/yuque/0/2024/webp/22361634/1723550808757-69938548-95d1-4ab0-bcc8-d545529058ae.webp)\n\n## 数据状态管理之痛\n\n- 我们先思考一个问题，为什么需要数据状态管理，数据状态管理到底在解决什么样的问题\n- 这其实是框架、组件化带来的概念，让我们回到最初的起点，还是那个简单的案例：\n\n![示意图](https://cdn.nlark.com/yuque/0/2024/webp/22361634/1723550832851-7e5fbf7c-d141-4f32-880b-e428bbc20781.webp)\n\n- 点击页面中一处“收藏”之后，页面里其他“收藏”按钮也需要切换为“已收藏”状态：\n\n![示意图](https://cdn.nlark.com/yuque/0/2024/webp/22361634/1723550847928-f8b3d391-cbf2-4a37-b897-0b0cc4551de5.webp)\n\n- 如果没有数据状态，也许我们需要：\n\n```javascript\nconst btnEle1 = $('#btn1')\nconst btnEle2 = $('#btn2')\n\nbtnEle1.on('click', () => {\n  if (btnEle.textContent === '已收藏') {\n    return\n  }\n  btnEle1.textContent = '已收藏'\n  btnEle2.textContent = '已收藏'\n})\n\nbtnEle2.on('click', () => {\n  if (btnEle2.textContent === '已收藏') {\n    return\n  }\n  btnEle1.textContent = '已收藏'\n  btnEle2.textContent = '已收藏'\n})\n```\n\n- 这只是两个按钮的情况，处理起来就非常混乱难以维护了，这种情况非常容易滋生 bugs\n- 现代化的框架解决这个问题的思路是组件化，组件依赖数据，对应这个场景数据状态就是简单的：\n\n```javascript\nhasMarked: false / true\n```\n\n- 根据这个数据，所有的收藏组件都可以响应正确的视图操作\n- 我们把面条式的代码转换成可维护的代码，重中之重就成了数据的管理，这就是数据状态的雏形\n- 但是数据一旦庞大起来，如何和组件形成良好的交互就是一门学问了\n- 比如我们要思考：\n    - 一个组件需要和另一个组件共享状态\n    - 一个组件需要改变另一个组件的状态\n- 以 React 为例，其他框架类似，如果 React 或者 Vue 自己来维护这些数据，数据状态就是一个对象，并且这个对象在组件之间要互相修改，及其混乱\n- 接着我们衍生出这样的问题：hasMarked 这类数据到底是应该放在 state 中维护，还是借助数据状态管理类库，比如在 Redux 中维护呢？至少这样一来，数据源是单一的，数据状态和组件是解耦的，也更加方便开发者进行调试和扩展数据\n\n### 数据谁来维护？\n\n- 我们以 React state 和 Redux 为例，继续分析上面抛出的“数据谁来维护？”问题：\n    - React 中 state 维护数据在组件内部，这样当某项 state 需要与其他组件共享时，我们可以通过 props 来完成组件间通讯\n    - 实践上来看，这就需要相对顶层的组件维护共享的 state 并提供修改此项 state 的方法，state 本身和修改方法都需要通过 props 传递给子孙组件\n    - 使用 Redux 的时候，state 维护在 Redux store 当中\n    - 任何需要访问并更新 state 的组件都需要感知或订阅 Redux store，这通常借助容器组件来完成\n    - Redux 对于数据采用集中管理的方式\n- 我尝试从数据持久度、数据消费范围上来回答这个问题\n- 首先，数据持久度上，不同状态数据在持久度上大体可以分为三类：\n    - 快速变更型\n    - 中等持续型\n    - 长远稳定型\n- **快速变更型**\n    - 这类数据在应用中代表了某些原子级别的信息，且显著特点是变更频率最快\n    - 比如一个文本输入框数据值，可能随着用户输入在短时间内持续发生变化\n    - 这类数据显然更适合维护在 React 组件之内\n- **中等持续型数据**\n    - 在用户浏览或使用应用时，这类数据往往会在页面刷新前保持稳定\n    - 比如从异步请求接口通过 Ajax 方式得来的数据\n    - 又或者用户在个人中心页，编辑信息提交的数据\n    - 这类数据较为通用，也许会被不同组件所需求\n    - 在 Redux store 中维护，并通过 connect 方法进行连接，是不错的选择\n- **长远稳定型数据**\n    - 指在页面多次刷新或者多次访问期间都保持不变的数据\n    - 因为 Redux store 会在每次页面挂载后都重新生成一份，因此这种类型的数据显然应该存储在 Redux 以外其他地方，比如服务端数据库或者 local storage\n- 下面，我们从另一维度：数据消费范围来分析\n    - 数据特性体现在消费层面，即有多少组件需要使用\n    - 我们以此来区分 React 和 Redux 的不同分工。\n    - **广义上，越多组件需要消费同一种数据，那么这种数据维护在 Redux store 当中就越合理**\n    - **反之，如果某种数据隔离于其他数据，只服务于应用中某单一部分，那么由 React 维护更加合理**\n\n- 具体来看，共享的数据在 React 当中，应该存在于高层组件，由此组件进行一层层传递。如果在 props 传递深度上，只需要一两个层级就能满足消费数据的组件需求，这样的跨度是可以接受的；反之，如果跨越层级很多，那么关联到的所有中间层级组件都需要进行接力赛式的传递，这样显然会增加很多乏味的传递代码，也破坏了中间组件的复用性。这个时候，使用 Redux 维护共享状态，合理设置容器组件，通过 connect 来打通数据，就是一种更好的方式。\n- 一些完全不存在父子关系的组件，如果需要共享数据，比如前面提到过的一个页面需要多处展示用户头像。这往往会造成数据辐射分散的问题，对于 React 模式的状态管理十分不利。在这种场景下，使用 Redux 同样是更好的选择。\n- 最后一点，如果你的应用有跟踪状态的功能，比如需要完成“重放”，“返回”或者“Redo/Undo”类似需求，那么 Redux 无疑是最佳选择。因为 Redux 天生擅长于此：每一个 action 都描述了数据状态的改变和更新，数据的集中管理非常方便进行记录。\n- 最后，什么情况下该使用哪种数据管理方式，是 React 维护 state 还是 Redux 集中管理，这个讨论不会有唯一定论。这需要开发者对于 React、Redux 有深入理解，并结合场景需求完成选择。\n- 上面的 Redux 可以被任何一个数据管理类库所取代，也就是说，适合放在 Redux 中的数据，如果开发者没有使用 Redux，而使用了 Mobx，那么也应该放在 Mobx store 中。\n\n### 数据管理场景\n\n我们来看一个场景来加深理解\n\n## Redux 到底怎么用\n\n- 某电商网站，应用页面骨架如下：\n\n![示意图](xxx)\n\n- 对应代码：\n- // 遍历渲染每一个商品\n- 其中，ProductsContainer 组件负责渲染每一个商品条目：\n\n```tsx\nimport Product from './Product'\n\nexport default class ProductsContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [\n        '商品1',\n        '商品2',\n        '商品3'\n      ]\n    }\n  }\n  renderProducts() {\n    return this.state.products.map((product) => {\n      return <Product name={product} />\n    })\n  }\n  render() {\n    return (\n      <div className='products-container'>\n        {this.renderProducts()}\n      </div>\n    )\n  }\n}\n```\n\n- Product 组件作为 UI 组件／展示组件，负责接受数据、展现数据，Product 即可以用函数式／无状态组件完成：\n\n\n```tsx\nimport React, { Component } from 'react'\n\nexport default class Product extends Component {\n  render() {\n    return (\n      <div className='product'>\n        {this.props.name}\n      </div>\n    )\n  }\n}\n```\n\n- 这样的设计，完全使用 React state 就可以完成，且合理高效。\n- 但是，如果商品有“立即购买”按钮，点击购买之后加入商品到购物车（对应上面 Cart Info 部分）。这时候需要注意，购物车的商品信息会在更多页面被消费。比如：\n    - 当前页面右上角需要展示购物车里的商品数目\n    - 购物车页面本身\n    - 支付前 checkout 页面\n    - 支付页面\n- 这就是单页面应用需要对数据状态进行管理的信号：我们维护一个 cartList 数组，供应用消费使用，这个数组放在 Redux 或者 Mobx，或者 Vuex 当中都是可行的。\n\n### 合理 connect 场景\n\n- 在使用 Redux 时，我们搭配 React-redux 来对组件和数据进行联通（connect），一个常陷入的误区就是滥用 connect，而没有进行更合理的设计分析。也可能只在顶层进行了 connect 设计，然后再一层层进行数据传递。\n- 比如在一个页面中存在 Profile、Feeds（信息流）、Images（图片）区域，如图所示。\n\n![示意图](xxx)\n\n- 这些区域构成了页面的主体，它们分别对应于 Profile、Feeds、Images 组件，共同作为 Page 组件的子组件而存在。\n- 如果只对 Page 这个顶层组件进行 connect 设计，其他组件的数据依靠 Page 组件进行分发，则设计如图所示：\n\n![示意图](xxx)\n\n- 这样做存在的问题如下：\n    - 当改动 Profile 组件中的用户头像时，由于数据变动整个 Page 组件都会重新渲染；\n    - 当删除 Feeds 组件中的一条信息时，整个 Page 组件也都会重新渲染；\n    - 当在 Images 组件中添加一张图片时，整个 Page 组件同样都会重新渲染。\n- 因此，更好的做法是对 Profile、Feeds、Images 这三个组件分别进行 connect 设计，在 connect 方法中使用 mapStateToProps 筛选出不同组件关心的 state 部分，如图所示：\n\n![示意图](xxx)\n\n- 这样做的好处很明显：\n    - 当改动 Profile 组件中的用户头像时，只有 Profile 组件重新渲染；\n    - 当删除 Feeds 组件中的一条信息时，只有 Feed 组件重新渲染；\n    - 当在 Images 组件中添加一张图片时，只有 Images 组件重新渲染。\n\n### 扁平化数据状态\n\n- 扁平化的数据结构是一个很有意义的概念，它不仅能够合理引导开发逻辑，同时也是性能优化的一种体现。请看这样的数据结构：\n\n```tsx\n{\n  articles: [{\n    comments: [{\n      authors: [{\n      }]\n    }]\n  }],\n  ...\n}\n```\n\n- 不难想象这是一个文章列表加文章评论互动的场景，其对应于三个组件：Article、Comment 和 Author。这样的页面设计比比皆是，如图所示：\n\n![示意图](xxx)\n\n- 相关 reducer 的处理很棘手，如果 articles[2].comments[4].authors1 发生了变化，想要返回更新后的状态，并保证不可变性，操作起来不是那么简单的，我们需要对深层对象结构进行拷贝或递归。\n- 因此，更好的数据结构设计一定是扁平化的，我们对 articles、comments、authors 进行扁平化处理。例如 comments 数组不再存储 authors 数据，而是记录 userId，需要时在 users 数组中进行提取即可：\n\n```tsx\n{\n  articles: [{\n    ...\n  }],\n  comments: [{\n    articleId: ..,\n    userId: ...,\n    ...\n  }],\n  users: [{\n    ...\n  }]\n}\n```\n\n- 不同组件只需要关心不同的数据片段，比如 Comment 组件只关心 comments 数组；Author 组件只关心 users 数组。这样不仅操作更合理，而且有效减少了渲染压力。\n\n## Redux 的罪与罚\n\n- 前文终点提到了 Redux，其实现原理较为简单，核心代码也不过几行，简要来说：Redux 是我们之前提到的发布订阅模式结合函数式编程的体现。这里不再过多赘述，我们主要来看看以 Redux 为首的数据状态管理类库的“缺陷”和发展点\n- 其实，Dan Abramov 很早就提到过 “You might not need Redux”，文中提到了 Redux 的限制。他也说过 “Try Mobx” 这种“打脸”行为。归纳一下，Redux 的限制主要体现在：\n    - Redux 带来了函数式编程、不可变性思想等，为了配合这些理念，开发者必须要写很多“模式代码（boilerplate）”，繁琐以及重复是开发者不愿意容忍的。当然也有很多 hack 旨在减少 boilerplate，但目前阶段，可以说 Redux 天生就附着繁琐。\n    - 使用 Redux，那么你的应用就要用 objects 或者 arrays 描述状态。\n    - 使用 Redux，那么你的应用就要使用 plain objects 即 actions 来描述变化。\n    - 使用 Redux，那么你的应用就要使用纯函数去处理变化。\n    - 应用中，状态很多都要抽象到 store，不能痛痛快快地写业务，一个变化就要对应编写 action（action creator）、reducer 等。\n- 这些“缺点”和响应式结合函数式的 Mobx 相比，编程体验被“打了折扣”\n\n## Redux 上层解决方案\n\n- 为了弥补这些缺点，社区开启了一轮又一轮的尝试，其中一个努力方向是基于 Redux 封装一整套上层解决方案，这个方向以 Redux- sage、dva、rematch 类库或框架为主。\n- 我总结一下这些解决方案的特点和思路：\n    - 简化初始化过程\n- 传统的 Redux 初始化充满了 hack，过于函数式，且较为繁琐：\n\n```tsx\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\n\nconst initialState = {\n    // ...\n}\n\nconst store = initialState => createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(thunk),\n        // ...\n    )\n)\n```\n\n- 这其中我们只应用了一个中间件，还没有涉及到 devtool 的配置。而不论是 Dva 还是其他方案，都采用面向对象式的配置化初始。\n    - 简化 reducers\n- 传统的 reducers 可能需要写恼人的 switch...case 或很多样板代码，而更上层的解决方案进行封装后，类似：\n\n```tsx\nconst reducer = {\n    ACTIONTYPE1: (state, action) => newState,\n    ACTIONTYPE2: (state, action) => newState,\n}\n```\n\n- 更加清爽。\n    -  带请求的副作用\n- 处理网络请求，Redux 一般需要 thunk 中间件，它的原理是：首先 dispatch 一个 action，但是这个 action 不是 plain object 类型，而是一个函数；thunk 中间件发现 action type 为函数类型时，把 dispatch 和 getState 等方法作为参数，传递给函数进行副作用逻辑。\n- 如果读者不是 React、Redux 开发者，也许很难看懂上一段描述，这也是 Redux 处理异步副作用的晦涩体现。更上层的解决方案 Redux-saga 采用 generator 的思想，或 async/await 处理副作用，无疑更加友好合理。\n- 为了更好地配合生成器方案，上层方案将 action 分为普通 action 和副作用 action，开发者使用起来也更加清晰。\n    - reducer 和 action 合并\n- 为了进一步减少模版代码，一个通用的做法是在 Redux 之上，将 reducer 和 action 声明合并，类似：\n\n```tsx\nconst store = {\n    state: {\n        count: 0,\n        state1: {}\n    },\n    reduers: {\n        action1: (state, action) => newState,\n        action2: (state, action) => newState,\n    }\n}\n```\n\n- 这样的声明一步到位，我们定义了两个 action：\n    - action1\n    - action2\n\n- 它们出自于 store.reducers 的键名，而对应键值即为 reducer 逻辑。\n- 这些都是基于 Redux 封装上层解决方案的基本思想，了解了这些，Dva、Redux-saga 原理已经对读者不再陌生！\n- 当然，理清了数据状态管理的意义，简化了数据管理的操作，我们还要分析到底应该如何组织数据。\n\n## 我们到底需要怎样的数据状态管理\n\n- 关于 Redux，这里不再过多讨论。我们试图脱离开 Redux 本身，思考到底需要什么样的数据状态管理方案。整理我们的核心诉求就是：方便地修改数据，方便地获取数据。\n\n### 新的发展趋势：Mobx\n\n- 从核心诉求出发，我们有两种做法：修改数据，Redux 提倡函数式、提倡不可变性、提倡数据扁平化，获取数据说到底是依赖发布订阅模式。相对地，Mobx 是面向对象和响应式的结合，它的数据源是可变的，对数据的观察是响应式的：\n\n```tsx\nconst foo = observable({\n    a: 1,\n    b: 2\n})\n\nautoRun(() => {\n    console.log(foo.a)\n})\n\nfoo.b = 3 // 没有任何输出\nfoo.a = 2 // 输出：2\n```\n\n- 这像不像我们前面课程提到的数据拦截/代理？没错，它们的原理都是完全一致的。尝试对上面的代码改为：\n\n```tsx\nconst state = observable({\n    state1: {}\n})\n\nautoRun(() => {\n    return (<Component state1={state1} />)\n})\n\nstate.state1 = {}\n```\n\n- 当我们改动 state.state1 时，autoRun 的回调将会触发，引起了组件的重新渲染。不同于 Redux，这就是另一种流派 Mobx 的核心理念\n- 不管是 Redux 还是 Mobx，它们都做到了：组件可以读取 state，修改 state；有新 state 时更新。这个 state 是单一数据源，只不过修改 state 方式不同。更近一步地说，Mobx 通过包装对象和数组为可观察对象，隐藏了大部分的样板代码，比 Redux 更加简洁，也更加“魔幻”，更像是“双向绑定”。\n- 对此我的建议是：在数据状态不太复杂的情况下，Mobx 也许更加简洁高效；如果数据状态非常复杂，或者你是函数式编程的粉丝，可以考虑 Redux，但是在 Redux 层上进行封装，使用类似 Dva 方案，是一个明智的选择。\n\n### 如何做到 Redux free（context 和 hooks）\n\n- 做到 Redux free，有两种选择：一个是拥抱 Mobx 或者 GraphQL，但还是没有脱离框架或者类库；另一个选择就是选择原生 React 方案，其中之一就是 context API，React 16.3 介绍了稳定版的 context 特性，它从某种程度上可以更方便地实现组件间通信，尤其是对于跨越多层父子组件的情况，更加高效。我们知道 Redux-react 就是基于 context 实现的，那么在一些简单的情况下，完全可以使用稳定的 context，而抛弃 Redux。\n- 在 ReactConf 2018 会议中，React 团队发布了 React hooks。简单来看，hooks 给予了函数式组件像类组件工作的能力，函数式组件可以使用 state，并且在一些副作用后进行 update。useReducer hooks 搭配 context API 以及 useContext hook，完全可以模仿一个简单的 Redux。useReducer hooks 使我们可以像 reducer 的方式一样更新 state，useContext 可以隔层级传递数据，原生 React 似乎有了内置 Redux 的能力。当然这种能力是不全面的，比如对网络请求副作用的管理、时间旅行和调试等。\n- 这不是一篇讲解 React 的课程，具体代码细节我们不再展开，感兴趣的读者可以参考：\n    - [react hooks VS redux](https://www.reddit.com/r/reactjs/comments/bqf5ot/can_anyone_tell_me_why_hooks_have_exploded/eo6fe6e/?context=10000)\n    - [from-redux-to-hooks-case-study](https://staleclosures.dev/from-redux-to-hooks-case-study/)\n\n## 总结\n\n- 其实数据状态管理没有永恒的“最佳实践”。随着应用业务的发展，数据的复杂程度是不断扩张的，数据和组件是绑定在一起的概念，我们如何梳理好数据，如何对于特定的行为修改特定的数据，给予特定组件特定的数据，是一个非常有趣的话题，也是进阶路上的“必修课”。 --\x3e",r:{minutes:16.19,words:4857},t:"揭秘 React 真谛：数据状态管理",O:4,y:"a"}}],["/knowledge/frontEnd/frame/react/understandReact.html",{loader:()=>i.e(1245).then(i.bind(i,6823)),meta:{d:16782336e5,l:"2023年3月8日",e:"<ul>\n<li>React 是前端中最受瞩目的框架，其倡导的多种思想也对其他框架（比如 Vue）有着广泛影响</li>\n<li>但是很多 React 开发者停留在「会使用」的阶段，而并没有在细节之处把握 React 精髓\n<ul>\n<li>可能对各种生命周期「了如指掌」</li>\n<li>可能对 React 虚拟 DOM diff 算法「对答如流」</li>\n<li>可能对单向数据流「如数家珍」</li>\n</ul>\n</li>\n<li>同时，现在 React 面试越来越「范式化」，除了实际动手写码的题目之外，其他相关面试题毫无新意，很容易被应试，很难考察开发者的 React 功底</li>\n<li>对此，下面挑选出 React 中一些「不为人知」却又非常重要的点，进行解析，可以更好、更深入地理解 React</li>\n<li>相关知识点如下：</li>\n</ul>",r:{minutes:10.36,words:3108},t:"你以为你懂 React 吗？",O:2,y:"a"}}],["/knowledge/frontEnd/html/webComponents/webComponents.html",{loader:()=>i.e(1905).then(i.bind(i,4430)),meta:{d:17234208e5,l:"2024年8月12日",c:["Web components"],e:"<ul>\n<li>作为「更高阶」的前端工程师，要时刻保持技术视野和信息广度</li>\n<li>事实上，Web components 的概念在几年前也已经提出，但是貌似一直没有发展的「如火如荼」</li>\n<li>在框架带来的「组件化」、「生命周期化」这些统治级别的概念下，对比并结合 Web components，我认为是可以深入研究的一个课题方向</li>\n<li><strong></strong>：\n<ul>\n<li>原生规范，无需框架，但是继承且具备了框架的优点\n<ul>\n<li>在新的 Web components 规范中，会发现组件生命周期的概念、slot 概念、模版概念（类比 JSX 或者 Vue template），再结合本来就已经存在的组件化，shadow dom，扩展原生元素的能力，Web components 还是具备了较好的发展前景</li>\n</ul>\n</li>\n<li>原生使用，无需编译\n<ul>\n<li>现有的一系列框架，不论是 Vue 还是 React，都需要进行编译，而 Web components 因为原生，会得到浏览器的天然支持，自然就可以免去编译构建过程</li>\n</ul>\n</li>\n<li>真正的 CSS scope\n<ul>\n<li>Web components 实现了真正的 CSS scope，做到了样式隔离</li>\n<li>这一点可以对比 CSS Modules</li>\n<li>真正的 CSS scope 对于项目的可维护性至关重要</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>真正的高级工程师，不仅仅要理解 this、熟练掌握各种基础（当然这是前提），更要有技术嗅觉，对新的解决方案能够理解，并进行对比，面向「未来」编程</li>\n</ul>",r:{minutes:1.34,words:402},t:"不可忽视的 Web components",O:1,y:"a"}}],["/404.html",{loader:()=>i.e(7490).then(i.bind(i,7995)),meta:{t:""}}],["/posts/",{loader:()=>i.e(8666).then(i.bind(i,7552)),meta:{t:"Posts"}}],["/apps/",{loader:()=>i.e(6267).then(i.bind(i,8395)),meta:{t:"Apps"}}],["/deploy/",{loader:()=>i.e(8176).then(i.bind(i,7540)),meta:{t:"Deploy"}}],["/family/",{loader:()=>i.e(3415).then(i.bind(i,7113)),meta:{t:"Family"}}],["/web/",{loader:()=>i.e(1103).then(i.bind(i,1265)),meta:{t:"Web"}}],["/knowledge/frontEnd/css/",{loader:()=>i.e(9182).then(i.bind(i,9644)),meta:{t:"Css"}}],["/knowledge/frontEnd/",{loader:()=>i.e(7318).then(i.bind(i,8322)),meta:{t:"Front End"}}],["/knowledge/",{loader:()=>i.e(9181).then(i.bind(i,6428)),meta:{t:"Knowledge"}}],["/knowledge/frontEnd/engineering/",{loader:()=>i.e(78).then(i.bind(i,7773)),meta:{t:"Engineering"}}],["/knowledge/frontEnd/frame/",{loader:()=>i.e(1192).then(i.bind(i,4798)),meta:{t:"Frame"}}],["/knowledge/frontEnd/html/",{loader:()=>i.e(7054).then(i.bind(i,7140)),meta:{t:"Html"}}],["/knowledge/frontEnd/javascript/",{loader:()=>i.e(9436).then(i.bind(i,4796)),meta:{t:"Javascript"}}],["/knowledge/frontEnd/performanceOptimization/",{loader:()=>i.e(5298).then(i.bind(i,8072)),meta:{t:"Performance Optimization"}}],["/knowledge/frontEnd/programmingThinkingAndAlgorithms/",{loader:()=>i.e(1523).then(i.bind(i,8406)),meta:{t:"Programming Thinking and Algorithms"}}],["/knowledge/interview/",{loader:()=>i.e(3417).then(i.bind(i,9966)),meta:{t:"Interview"}}],["/knowledge/frontEnd/frame/react/",{loader:()=>i.e(7192).then(i.bind(i,7198)),meta:{t:"React"}}],["/knowledge/frontEnd/html/webComponents/",{loader:()=>i.e(4899).then(i.bind(i,1825)),meta:{t:"Web Components"}}],["/category/",{loader:()=>i.e(3583).then(i.bind(i,8652)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(4021).then(i.bind(i,8003)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E5%B7%A5%E5%85%B7/",{loader:()=>i.e(7968).then(i.bind(i,400)),meta:{t:"工具 分类",I:!1}}],["/category/css3/",{loader:()=>i.e(168).then(i.bind(i,1306)),meta:{t:"CSS3 分类",I:!1}}],["/category/html5/",{loader:()=>i.e(3384).then(i.bind(i,7657)),meta:{t:"HTML5 分类",I:!1}}],["/category/javascript/",{loader:()=>i.e(1791).then(i.bind(i,4780)),meta:{t:"JavaScript 分类",I:!1}}],["/category/%E9%9D%A2%E8%AF%95/",{loader:()=>i.e(1673).then(i.bind(i,2934)),meta:{t:"面试 分类",I:!1}}],["/category/web-components/",{loader:()=>i.e(7609).then(i.bind(i,1910)),meta:{t:"Web components 分类",I:!1}}],["/tag/",{loader:()=>i.e(1797).then(i.bind(i,1397)),meta:{t:"标签",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>i.e(602).then(i.bind(i,33)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(1431).then(i.bind(i,8386)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/css-bfc/",{loader:()=>i.e(5037).then(i.bind(i,9919)),meta:{t:"标签: CSS BFC",I:!1}}],["/tag/css-modules/",{loader:()=>i.e(7057).then(i.bind(i,1069)),meta:{t:"标签: CSS Modules",I:!1}}],["/tag/css-variable/",{loader:()=>i.e(6416).then(i.bind(i,8373)),meta:{t:"标签: CSS Variable",I:!1}}],["/tag/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/",{loader:()=>i.e(9739).then(i.bind(i,4234)),meta:{t:"标签: 响应式布局",I:!1}}],["/tag/css/",{loader:()=>i.e(5381).then(i.bind(i,480)),meta:{t:"标签: CSS",I:!1}}],["/article/",{loader:()=>i.e(7511).then(i.bind(i,5649)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>i.e(7199).then(i.bind(i,1591)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>i.e(5464).then(i.bind(i,967)),meta:{t:"时间轴",I:!1}}]])},9354:(n,e,i)=>{i.d(e,{U:()=>t});const t=JSON.parse('{"base":"/","lang":"zh-CN","title":"欢迎来到我的Blog","description":"记录并输出一切能让自己提升的知识","head":[["link",{"rel":"icon","href":"/favicon.ico"}]],"locales":{}}')},8120:(n,e,i)=>{i.d(e,{K:()=>t});const t=JSON.parse('{"encrypt":{},"author":{"name":"三金","url":"https://www.zxwin0125.top"},"license":"CC BY-NC-ND 4.0","blog":{"name":"三金","avatar":"/avatar_self.jpg","description":"所谓真正的宝物，是可以赌上人生，忘我投入的东西","medias":{"GitHub":"https://github.com/zxwin0125","Wechat":"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/image/Wechat.jpg"},"articleInfo":["Category","Date","Tag","ReadingTime","PageView"]},"navbarLayout":{"start":["Brand"],"center":["Links"],"end":["Repo","Outlook","Search"]},"breadcrumb":false,"pageInfo":["Category","Tag","ReadingTime","Word","PageView"],"contributors":false,"lastUpdated":true,"editLink":false,"darkmode":"switch","fullscreen":true,"displayFooter":true,"repo":"rockbenben/LearnData","repoLabel":"GitHub","repoDisplay":true,"docsDir":"docs","locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":[{"text":"主页","icon":"house","link":"/blog"},{"text":"知识体系","icon":"sitemap","prefix":"/knowledge/","children":[{"text":"前端","icon":"code","link":"frontEnd/html/html5Tag"},{"text":"服务端","icon":"server","link":"/"},{"text":"客户端","icon":"mobile","link":"/"},{"text":"数据库","icon":"database","link":"/"},{"text":"系统","icon":"computer","link":"/"},{"text":"Mac相关","icon":"laptop","link":"/"},{"text":"工具相关","icon":"toolbox","link":"/"},{"text":"面试","icon":"splotch","link":"interview/css/index"}]},{"text":"项目相关","icon":"diagram-project","link":"/"},{"text":"工作技能","icon":"laptop-code","link":"/"},{"text":"学会管理","icon":"users-gear","link":"/"}],"sidebar":{"":["/DailyRoutine","/Fitness",{"text":"读书笔记","icon":"fa6-brands:readme","link":"https://newzone.top/reading/"},{"text":"🧰 应用手册","icon":"","prefix":"/apps/","link":"","collapsible":true,"children":["Applist.md","toolbox.md",{"text":"其他","icon":"fa6-solid:code-compare","collapsible":true,"children":["design.md"]}]},{"text":"🌐 页面开发","icon":"","prefix":"/web/","link":"","collapsible":true,"children":"structure"},{"text":"🏗️ 网站部署","icon":"","prefix":"/deploy/","link":"","collapsible":true,"children":["Static.md","CloudServices.md","VPS.md",{"text":"部署工具","icon":"fa6-brands:windows","collapsible":true,"children":["GitHub.md","Cloudflare.md","MySQL.md","DNS.md"]}]},{"text":"🔡 代码编程","icon":"","prefix":"/code/","collapsible":true,"children":["README.md",{"text":"Basic","icon":"fa6-solid:cube","collapsible":true,"children":["Markdown.md","Electron.md","AutoHotkey.md","Regex.md"]},{"text":"FrondEnd","icon":"fa6-solid:object-group","collapsible":true,"children":["Vue.md","HTML.md","Javascript.md","Python.md"]}]},{"text":"🛖 生活记录","icon":"","prefix":"/family/","collapsible":true,"children":"structure"},{"text":"博客文章","icon":"fa6-solid:feather-pointed","prefix":"/_posts/","link":"/blog","collapsible":true,"children":"structure"}],"/apps/topic/":"structure","/knowledge/frontEnd/":[{"text":"HTML","icon":"https://s21.ax1x.com/2024/09/19/pAKWX7V.png","prefix":"html/","collapsible":true,"children":["html5Tag.md","htmlSemanticization.md","html5Mobile.md",{"text":"Web components","icon":"","prefix":"webComponents/","collapsible":true,"children":["webComponents"]}]},{"text":"CSS","icon":"https://s21.ax1x.com/2024/09/19/pAKWvkT.png","prefix":"css/","collapsible":true,"children":"structure"},{"text":"JavaScript","icon":"https://s21.ax1x.com/2024/09/19/pAKfpp4.png","prefix":"javascript/","collapsible":true,"children":"structure"},{"text":"前端框架","icon":"https://s21.ax1x.com/2024/09/19/pAKWxtU.png","prefix":"frame/","collapsible":true,"children":"structure"},{"text":"前端工程化","icon":"screwdriver-wrench","prefix":"engineering/","collapsible":true,"children":"structure"},{"text":"前端性能优化","icon":"bug-slash","prefix":"performanceOptimization/","collapsible":true,"children":"structure"},{"text":"前端编程思维和算法","icon":"brain","prefix":"programmingThinkingAndAlgorithms/","collapsible":true,"children":"structure"}],"/knowledge/interview/":[{"text":"CSS","icon":"https://s21.ax1x.com/2024/09/19/pAKWvkT.png","prefix":"css/","collapsible":true,"children":"structure"}]}}}}')},6650:(n,e,i)=>{},1878:(n,e,i)=>{i.d(e,{v:()=>t});const t={"/web/":["VuePress","docsify","Comments"],"/family/":["Diet","Coupon","Life"],"/_posts/":["/posts/2024-03-01-blog_example.html","/posts/2024-03-02-blog_example2.html"],"/apps/topic/":["topic01","topic02anytitle"],"/knowledge/frontEnd/css/":["bfc","cssCenter","cssVariable","cssModules","responsiveLayoutAndBootstrap"],"/knowledge/frontEnd/javascript/":["this","closure","api","asynchronous","promise","objectPrototype","es6Next","other"],"/knowledge/frontEnd/frame/":["frameAnalogy","frameIsomorphic","frameStudy",{text:"React",prefix:"react/",collapsible:!0,children:["understandReact","reactComponentDesign","reactStatus","reactNowAndFuture"]}],"/knowledge/frontEnd/engineering/":["module","webpack","projectOrganizationDesign","codeSpecification"],"/knowledge/frontEnd/performanceOptimization/":["monitorAndError","problems","reactFrame"],"/knowledge/frontEnd/programmingThinkingAndAlgorithms/":["designPattern","dataStructure","function","algorithms","wx"],"/knowledge/interview/css/":[""]}},8047:(n,e,i)=>{i.d(e,{P:()=>t});const t={GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2AAE67"/><path fill="#FFF" d="M501 417c-14 0-25-12-25-26s11-26 25-26 26 12 26 26-12 26-26 26m-144 0c-15 0-26-12-26-26s11-26 26-26 25 12 25 26-11 26-25 26m72-150c-120 0-217 82-217 183 0 55 29 104 75 138a15 15 0 0 1 6 11l-1 5-9 37-2 5c0 4 4 8 8 8l4-2 47-27c4-3 8-4 12-4l6 1a255 255 0 0 0 83 10c-5-14-7-29-7-45 0-92 88-166 197-166h9c-16-87-103-154-211-154"/><path fill="#FFF" d="M692 561c-13 0-23-10-23-23 0-12 10-22 23-22 12 0 22 10 22 22 0 13-10 23-22 23m-121 0c-12 0-23-10-23-23 0-12 11-22 23-22s23 10 23 22c0 13-11 23-23 23m179 141c38-28 62-69 62-115 0-84-81-152-181-152s-180 68-180 152 80 152 180 152a212 212 0 0 0 65-9l9 3 40 23 3 1a6 6 0 0 0 6-6l-1-5-8-30v-4c0-4 2-8 5-10"/></svg>'}}},n=>{n.O(0,[1928,4685],(()=>n(n.s=569))),n.O()}]);