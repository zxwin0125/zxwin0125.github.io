"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[1572],{3386:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},2436:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>t});var e=a(6254);const l={},n=(0,a(3386).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h2 id="fis-特点" tabindex="-1"><a class="header-anchor" href="#fis-特点"><span>FIS 特点</span></a></h2><ul><li>相对于 Gulp 和 Grunt，FIS 的核心特点是高度集成</li><li>他把前端开发过程中常见的构建任务、调试任务都集成在内部</li><li>这样开发者就可以通过简单的配置文件的方式去配置构建过程需要完成的一些工作</li><li>它内部有一些内置任务能根据开发者的配置自动完成整个构建过程</li><li>除此之外，还有内置的一款 webServer，可以方便的去调试构建结果</li></ul><h2 id="fis-基本使用" tabindex="-1"><a class="header-anchor" href="#fis-基本使用"><span>FIS 基本使用</span></a></h2><ul><li>安装 fis3 到项目目录下</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fis3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>在项目目录下新建一个 fis 的配置文件 <code>fis-conf.js</code></li></ul><h3 id="资源定位" tabindex="-1"><a class="header-anchor" href="#资源定位"><span>资源定位</span></a></h3><ul><li>fis3 配置文件（默认<code>fis-conf.js</code>）所在的目录为项目根目录</li><li>执行 <code>fis3 release -d &#39;路径&#39;</code>将资源发布到该路径</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fis3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> release</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>利用 fis 里内置 match 方法进行资源定位 <ul><li>selector：fis3 把匹配文件路径的路径作为 selector，匹配到的文件会分配给它设置的 props</li><li>props：编译规则属性，包括文件属性和插件属性</li></ul></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="编译与压缩" tabindex="-1"><a class="header-anchor" href="#编译与压缩"><span>编译与压缩</span></a></h3><ul><li>可以通过配置文件的方式去配置如何处理文件的编译</li><li>fis-conf 的书写方式是类似于 css 的声明方式，通过 match 方法的第一个参数去指定一个选择器（global 通配符），用选择器去命中那些转换过程中的文件</li></ul><h4 id="scss-文件的转换" tabindex="-1"><a class="header-anchor" href="#scss-文件的转换"><span>scss 文件的转换</span></a></h4><ul><li>安装 fis-parser-node-sass（依赖 node-sass）</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fis-parser-node-sass</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>在 match 选项中添加 parser，通过 fis.plugin 载入插件</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;**/*.scss&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // renameExt 扩展名的修改</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  rExt</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.css&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 通过 node-sass 指定使用插件</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tparser </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;node-sass&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // fis 内置，压缩 css  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  optimizer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;clean-css&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行 <code>fis3 release -d output</code></li><li>执行编译后会发现 assets/css 目录下生成了 .css 文件，而且在最终使用这些文件的地方，也会自动只使用编译后的资源（index.html 引用 scss 文件变成了引用 css 文件）</li><li>这也是资源定位能力的核心体现</li></ul><h4 id="js文件-es6-的转换" tabindex="-1"><a class="header-anchor" href="#js文件-es6-的转换"><span>JS文件（ES6）的转换：</span></a></h4><ul><li>安装babel</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fis-parser-babel-6.x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>在 match 选项中添加 parser，通过 fis.plugin 载入插件</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;**/*.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 通过 node-sass 指定使用插件</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tparser</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;babel-6.x&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // fis 内置，压缩 js</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  optimizer</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">fis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;uglify-js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',24)]))}]]),t=JSON.parse('{"path":"/knowledge/frontEnd/engineering/automatedConstruction/fis.html","title":"FIS","lang":"zh-CN","frontmatter":{"title":"FIS","date":"2021-04-21T00:00:00.000Z","order":4,"description":"FIS 特点 相对于 Gulp 和 Grunt，FIS 的核心特点是高度集成 他把前端开发过程中常见的构建任务、调试任务都集成在内部 这样开发者就可以通过简单的配置文件的方式去配置构建过程需要完成的一些工作 它内部有一些内置任务能根据开发者的配置自动完成整个构建过程 除此之外，还有内置的一款 webServer，可以方便的去调试构建结果 FIS 基本使...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/engineering/automatedConstruction/fis.html"}],["meta",{"property":"og:site_name","content":"欢迎来到我的Blog"}],["meta",{"property":"og:title","content":"FIS"}],["meta",{"property":"og:description","content":"FIS 特点 相对于 Gulp 和 Grunt，FIS 的核心特点是高度集成 他把前端开发过程中常见的构建任务、调试任务都集成在内部 这样开发者就可以通过简单的配置文件的方式去配置构建过程需要完成的一些工作 它内部有一些内置任务能根据开发者的配置自动完成整个构建过程 除此之外，还有内置的一款 webServer，可以方便的去调试构建结果 FIS 基本使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-05T01:57:07.000Z"}],["meta",{"property":"article:published_time","content":"2021-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-05T01:57:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FIS\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-05T01:57:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"FIS 特点","slug":"fis-特点","link":"#fis-特点","children":[]},{"level":2,"title":"FIS 基本使用","slug":"fis-基本使用","link":"#fis-基本使用","children":[{"level":3,"title":"资源定位","slug":"资源定位","link":"#资源定位","children":[]},{"level":3,"title":"编译与压缩","slug":"编译与压缩","link":"#编译与压缩","children":[]}]}],"git":{"createdTime":1733363827000,"updatedTime":1733363827000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":1}]},"readingTime":{"minutes":2,"words":601},"filePathRelative":"knowledge/frontEnd/engineering/automatedConstruction/fis.md","localizedDate":"2021年4月21日","excerpt":"<h2>FIS 特点</h2>\\n<ul>\\n<li>相对于 Gulp 和 Grunt，FIS 的核心特点是高度集成</li>\\n<li>他把前端开发过程中常见的构建任务、调试任务都集成在内部</li>\\n<li>这样开发者就可以通过简单的配置文件的方式去配置构建过程需要完成的一些工作</li>\\n<li>它内部有一些内置任务能根据开发者的配置自动完成整个构建过程</li>\\n<li>除此之外，还有内置的一款 webServer，可以方便的去调试构建结果</li>\\n</ul>","autoDesc":true}')}}]);