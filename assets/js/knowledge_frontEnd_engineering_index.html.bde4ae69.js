"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[78],{3386:(i,e)=>{e.A=(i,e)=>{const l=i.__vccOpts||i;for(const[i,n]of e)l[i]=n;return l}},1840:(i,e,l)=>{l.r(e),l.d(e,{comp:()=>r,data:()=>a});var n=l(6254);const t={},r=(0,l(3386).A)(t,[["render",function(i,e){const l=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[e[4]||(e[4]=(0,n.Fv)('<h2 id="工程化的定义和主要解决的问题" tabindex="-1"><a class="header-anchor" href="#工程化的定义和主要解决的问题"><span>工程化的定义和主要解决的问题</span></a></h2><blockquote><p>前端工程化是指遵循一定的标准和规范，通过工具提高效率降低成本的一种手段</p></blockquote><ul><li>近些年之所以被广泛的关注和探讨是由于前端应用的功能要求不断提高，业务逻辑日益复杂 <ul><li>从传统的网站到现在的H5、移动APP、桌面应用，以及小程序，前端技术几乎是无所不能的全面覆盖</li><li>在这些表象的背后实际上是前端行业对开发人员的要求发生了天翻地覆的变化</li></ul></li><li>以往这种写Demo套模板调页面的刀耕火种的方式已经完全不符合当下对开发效率的要求了</li><li>前端工程化也是在这样一个背景下被提上台面，成为前端工程师必备的手段之一</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4)),(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(l,{color:"red"},{default:(0,n.k6)((()=>e[0]||(e[0]=[(0,n.eW)("技术往往是为了解决问题而存在的")]))),_:1})])]),e[5]||(e[5]=(0,n.Fv)('<ul><li>日常开发会面临的一些问题 <ul><li>想要使用 ES6+ 新特性，但是兼容有问题</li><li>想要使用 Less/Sass/PostCss 增强CSS的编程性，但是运行环境不能直接支持</li><li>想要使用 模块化/组件化 的方式提高项目的可维护性，但是运行环境也不能直接支持</li><li>部署上线前需要手动压缩代码及资源文件，部署过程需要手动上传代码到服务器</li><li>多人协作开发，无法硬性统一大家的代码风格，从仓库中pull回来的代码质量无法保证</li><li>部分功能开发时需要等待后端服务接口提前完成才可以做具体编码</li></ul></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一个项目过程中工程化的表现" tabindex="-1"><a class="header-anchor" href="#一个项目过程中工程化的表现"><span>一个项目过程中工程化的表现</span></a></h2><blockquote><p>一切提高效率、降低成本、质量保证为目的的手段都属于「工程化」 一切重复的工作都应该被工程化</p></blockquote><ul><li>实现前端工程化可以从以下几方面出发 <ul><li>模块化</li><li>组件化</li><li>规范化</li><li>自动化</li></ul></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/03.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>创建项目 <ul><li>使用脚手架工具自动地完成基础项目结构搭建并创建特定类型文件</li></ul></li><li>编码 <ul><li>借助工程化的工具自动做代码格式化、校验代码风格、编译/构建/打包</li></ul></li><li>预览 / 测试 <ul><li>借助一些现代化的 Web Server 提供热更新（HMR）、编译后通过 Source Map 定位源代码错误的位置，使用 Mock 解决在后端服务未完成的情况下如何提前开发具体的业务功能</li></ul></li><li>提交 <ul><li>使用 Git Hooks 自动化地检查代码（项目质量/项目风格），确保不会把有问题的代码提交到仓库，可以对提交日志做严格的格式限制</li></ul></li><li>部署 <ul><li>包装命令代替 ftp 上传、自动部署服务器</li></ul></li></ul><h2 id="工程化不等于工具" tabindex="-1"><a class="header-anchor" href="#工程化不等于工具"><span>工程化不等于工具</span></a></h2><ul><li>现阶段，部分工具过于强大，例如像 Webpack，导致很多新手误认为工程化就是指 Webpack</li><li>不然，工具并非工程化的核心，工程化的核心应该是对项目的一种整体规划或者架构，工具只是来落地实现这种规划架构的一种手段</li><li>落实工程化地第一件事应该是去规划一个项目整体的工作流架构，有了这些整体规划过后在具体去考虑应该搭配那些工具做哪些具体的配置选项来去实现工程化整体的规划</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/04.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>一些成熟的工程化集成</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/05.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>许多人认为这些工具就是官方给出的脚手架，其实，不同于之前所提到的工具，这里所列出的更应该属于特定类型的项目，官方给出的集成式工程化方案（不仅仅创建了项目，更多的是做出一些约定，并且提供许多工具）</li></ul><h2 id="工程化与node-js" tabindex="-1"><a class="header-anchor" href="#工程化与node-js"><span>工程化与Node.js</span></a></h2>',14)),(0,n.Lk)("ul",null,[e[3]||(e[3]=(0,n.Lk)("li",null,"在以前有人说 Ajax 给前端带来的新的生命力，而 Node 对于前端而言，除了让 JavaScript 有了一个新的舞台，更多的是让整个前端行业进行了一次工业革命",-1)),(0,n.Lk)("li",null,[e[2]||(e[2]=(0,n.eW)("工程化是一个非常庞大的概念，而且在这个过程中也不断地发展和成长，值得强调的是，不管怎么发展，始终它都是为了解决问题而存在的，")),(0,n.Lk)("strong",null,[(0,n.bF)(l,{color:"red"},{default:(0,n.k6)((()=>e[1]||(e[1]=[(0,n.eW)("切莫为了技术而技术")]))),_:1})])])])])}]]),a=JSON.parse('{"path":"/knowledge/frontEnd/engineering/","title":"工程化概述","lang":"zh-CN","frontmatter":{"title":"工程化概述","date":"2021-02-23T00:00:00.000Z","order":1,"description":"工程化的定义和主要解决的问题 前端工程化是指遵循一定的标准和规范，通过工具提高效率降低成本的一种手段 近些年之所以被广泛的关注和探讨是由于前端应用的功能要求不断提高，业务逻辑日益复杂 从传统的网站到现在的H5、移动APP、桌面应用，以及小程序，前端技术几乎是无所不能的全面覆盖 在这些表象的背后实际上是前端行业对开发人员的要求发生了天翻地覆的变化 以往这...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/engineering/"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"工程化概述"}],["meta",{"property":"og:description","content":"工程化的定义和主要解决的问题 前端工程化是指遵循一定的标准和规范，通过工具提高效率降低成本的一种手段 近些年之所以被广泛的关注和探讨是由于前端应用的功能要求不断提高，业务逻辑日益复杂 从传统的网站到现在的H5、移动APP、桌面应用，以及小程序，前端技术几乎是无所不能的全面覆盖 在这些表象的背后实际上是前端行业对开发人员的要求发生了天翻地覆的变化 以往这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-09T11:46:31.000Z"}],["meta",{"property":"article:published_time","content":"2021-02-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-09T11:46:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工程化概述\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/01.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/02.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/03.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/04.png\\",\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/05.png\\"],\\"datePublished\\":\\"2021-02-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-09T11:46:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"工程化的定义和主要解决的问题","slug":"工程化的定义和主要解决的问题","link":"#工程化的定义和主要解决的问题","children":[]},{"level":2,"title":"一个项目过程中工程化的表现","slug":"一个项目过程中工程化的表现","link":"#一个项目过程中工程化的表现","children":[]},{"level":2,"title":"工程化不等于工具","slug":"工程化不等于工具","link":"#工程化不等于工具","children":[]},{"level":2,"title":"工程化与Node.js","slug":"工程化与node-js","link":"#工程化与node-js","children":[]}],"git":{"createdTime":1732776004000,"updatedTime":1733744791000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":2}]},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"knowledge/frontEnd/engineering/index.md","localizedDate":"2021年2月23日","excerpt":"<h2>工程化的定义和主要解决的问题</h2>\\n<blockquote>\\n<p>前端工程化是指遵循一定的标准和规范，通过工具提高效率降低成本的一种手段</p>\\n</blockquote>\\n<ul>\\n<li>近些年之所以被广泛的关注和探讨是由于前端应用的功能要求不断提高，业务逻辑日益复杂\\n<ul>\\n<li>从传统的网站到现在的H5、移动APP、桌面应用，以及小程序，前端技术几乎是无所不能的全面覆盖</li>\\n<li>在这些表象的背后实际上是前端行业对开发人员的要求发生了天翻地覆的变化</li>\\n</ul>\\n</li>\\n<li>以往这种写Demo套模板调页面的刀耕火种的方式已经完全不符合当下对开发效率的要求了</li>\\n<li>前端工程化也是在这样一个背景下被提上台面，成为前端工程师必备的手段之一</li>\\n</ul>","autoDesc":true}')}}]);