"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[6689],{3386:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,l]of s)e[i]=l;return e}},3228:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>a,data:()=>t});var l=e(6254);const n={},a=(0,e(3386).A)(n,[["render",function(i,s){const e=(0,l.g2)("font");return(0,l.uX)(),(0,l.CE)("div",null,[s[4]||(s[4]=(0,l.Lk)("h3",{id:"盒模型",tabindex:"-1"},[(0,l.Lk)("a",{class:"header-anchor",href:"#盒模型"},[(0,l.Lk)("span",null,"盒模型")])],-1)),s[5]||(s[5]=(0,l.Lk)("blockquote",null,[(0,l.Lk)("p",null,"题目：简述 CSS 的盒模型")],-1)),(0,l.Lk)("ul",null,[(0,l.Lk)("li",null,[s[1]||(s[1]=(0,l.eW)("CSS 的盒模型主要包括以下两种，可通过 ")),(0,l.Lk)("strong",null,[(0,l.bF)(e,{color:"red"},{default:(0,l.k6)((()=>s[0]||(s[0]=[(0,l.eW)("box-sizing")]))),_:1})]),s[2]||(s[2]=(0,l.eW)(" 属性进行配置： ")),s[3]||(s[3]=(0,l.Lk)("ul",null,[(0,l.Lk)("li",null,[(0,l.Lk)("strong",null,"content-box"),(0,l.eW)("：默认属性，width 只包含 content")]),(0,l.Lk)("li",null,[(0,l.Lk)("strong",null,"border-box"),(0,l.eW)("：width 包含 (content、padding、border)")])],-1))])]),s[6]||(s[6]=(0,l.Fv)('<h3 id="css-specificity-权重" tabindex="-1"><a class="header-anchor" href="#css-specificity-权重"><span>CSS specificity (权重)</span></a></h3><blockquote><p>题目：简述下 css specificity</p></blockquote><ul><li>css specificity 即 css 中关于选择器的权重，以下三种类型的选择器依次下降</li></ul><ol><li><strong>id 选择器</strong>，如 #app</li><li><strong>class、attribute 与 pseudo-classes 选择器</strong>，如 .header、[type=&quot;radio&quot;] 与 :hover</li><li><strong>type 标签选择器和伪元素选择器</strong>，如 h1、p 和 ::before</li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>其中通配符选择器 *，组合选择器 + ~ &gt;，否定伪类选择器 :not() 对优先级无影响<br> 另有<strong>内联样式</strong> <code>&lt;div class=&quot;foo&quot; style=&quot;color: red;&quot;&gt;&lt;/div&gt;</code> 及 <strong>!important(最高)</strong> 具有更高的权重</p></div><blockquote><p><a href="https://codepen.io/zxwin0125/pen/qBeeORa" target="_blank" rel="noopener noreferrer">:not 的优先级影响</a> 可以看出 :not 对选择器的优先级无任何影响<br><a href="https://codepen.io/zxwin0125/pen/rNXXOwa" target="_blank" rel="noopener noreferrer">CSS Specificity</a> 可以看出十几个 class 选择器也没有一个 id 选择器权重高</p></blockquote><ul><li>补充问题: <ul><li>100 个 class 选择器和 id 选择器那个比较高「id 选择器高」</li><li>属性选择器和类选择器哪个权重较高「加上指定元素的属性选择器 &gt; 类选择器 &gt;属性选择器」</li><li>通配符选择器和元素选择器哪个权重教高「元素选择器高」</li></ul></li></ul><h3 id="与-选择器有什么不同" tabindex="-1"><a class="header-anchor" href="#与-选择器有什么不同"><span>+ 与 ~ 选择器有什么不同</span></a></h3><ul><li><code>+</code> 选择器匹配紧邻的兄弟元素</li><li><code>~</code> 选择器匹配随后的所有兄弟元素</li></ul><h3 id="z-index-与层叠上下文" tabindex="-1"><a class="header-anchor" href="#z-index-与层叠上下文"><span>z-index 与层叠上下文</span></a></h3><blockquote><p>题目：如何更好地给元素设置 z-index</p></blockquote><ul><li>在给元素设置z-index时，有几点需要注意：</li></ul><ol><li>确保元素的z-index值是唯一的，否则可能会出现元素重叠的问题</li><li>尽量将具有高z-index值的元素放在较低z-index值的元素的上面，以确保元素的堆叠顺序正确</li><li>避免在多个元素上同时使用z-index，因为这可能会导致元素重叠或显示不正确</li><li>如果需要设置多个元素的z-index值，可以使用CSS的层叠上下文（z-index stacking context）来解决。层叠上下文可以将元素分组，使得每个组内的元素按照z-index值的大小进行堆叠</li></ol><blockquote><p>题目：z-index: 999 元素一定会置于 z-index: 0 元素之上吗</p></blockquote><ul><li>z-index高数值不一定在低数值前面，因为有层叠上下文的概念</li><li>当处于两个兄弟层叠上下文时，子元素的层级显示不决定于自身的z-index，而取决于父级的z-index</li><li>代码见<a href="https://codepen.io/zxwin0125/pen/mdNNejL" target="_blank" rel="noopener noreferrer">z-index</a></li></ul><h3 id="水平垂直居中" tabindex="-1"><a class="header-anchor" href="#水平垂直居中"><span>水平垂直居中</span></a></h3><blockquote><p>题目: 如何实现一个元素的水平垂直居中<br> 代码见<a href="https://codepen.io/zxwin0125/pen/zYggrzE" target="_blank" rel="noopener noreferrer">水平垂直居中</a></p></blockquote><ul><li>absolute/translate</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  position: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">absolute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  left/top: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  transform: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">translate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>flex</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  justify-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  align-content: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>grid</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  place-items: </span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">center</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左侧固定、右侧自适应" tabindex="-1"><a class="header-anchor" href="#左侧固定、右侧自适应"><span>左侧固定、右侧自适应</span></a></h3><blockquote><p>题目: css 如何实现左侧固定300px，右侧自适应的布局<br> 代码见<a href="https://codepen.io/zxwin0125/pen/mdNNVxY" target="_blank" rel="noopener noreferrer">CSS布局_左固右适应</a></p></blockquote><ul><li>flex <ul><li>左侧: flex-basis: 200px</li><li>右侧: flex-grow: 1; flex-shrink: 0;</li></ul></li><li>grid <ul><li>父容器: grid-template-columns: 200px 1fr;</li></ul></li></ul><h3 id="三栏均分布局" tabindex="-1"><a class="header-anchor" href="#三栏均分布局"><span>三栏均分布局</span></a></h3><blockquote><p>题目: 如何实现三列均分布局<br> 代码见<a href="https://codepen.io/zxwin0125/pen/rNXXxvG" target="_blank" rel="noopener noreferrer">CSS布局_三均分</a></p></blockquote><ul><li>flex: <ul><li>方案一: flex: 1;</li><li>方案二: flex-basis: calc(100% / 3)</li></ul></li><li>grid: <ul><li>父容器: grid-template-columns: 1fr 1fr 1fr</li></ul></li></ul><h3 id="如何画一个正方形-长宽固定的长方形" tabindex="-1"><a class="header-anchor" href="#如何画一个正方形-长宽固定的长方形"><span>如何画一个正方形/长宽固定的长方形</span></a></h3><blockquote><p>问题：如何画一个正方形/长宽固定的长方形<br> 代码见<a href="https://codepen.io/zxwin0125/pen/rNXXxvG" target="_blank" rel="noopener noreferrer">CSS属性_aspect-ratio</a></p></blockquote><ul><li>过去的解决方案是使用 padding <ul><li>一个元素的 padding 如若设置为百分比，则代表的是以父元素宽度为基准，根据这个原理，可设置长宽比</li><li>但实际上意义有限，毕竟你把 padding 给占了，content 无任何区域</li></ul></li><li>现代化的解决方案是使用长宽比的 CSS 属性: aspect-ratio</li></ul><h3 id="css-如何避免样式冲突" tabindex="-1"><a class="header-anchor" href="#css-如何避免样式冲突"><span>CSS 如何避免样式冲突</span></a></h3><blockquote><p>题目：写 CSS 时如何避免命名样式冲突</p></blockquote><ol><li>BEM 式: .home-page .home-page-btn</li></ol><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.home-page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .home-page-btn {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BEM 有一个缺点，就是有些太长，可适当简化，只包裹该页面组件的根类名，但有可能增加样式冲突的风险</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.home-page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .btn {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>CSS Scoped</li></ol><ul><li>scoped css 会对当前组件(scope)下所有元素生成唯一的属性或类名，对所有 CSS 规则将携带唯一属性实现作用域的命名保护</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">手动写</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.btn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">编译后</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.btn</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> .jsx-1287234</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>CSS Module</li></ol><ul><li>module css 会对类名进行 hash 化</li></ul><h3 id="css-变量" tabindex="-1"><a class="header-anchor" href="#css-变量"><span>CSS 变量</span></a></h3><blockquote><p>题目：有没有使用过 css variable，它解决了哪些问题</p></blockquote><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">:root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  --bgcolor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">aaa</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  --color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">#</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css-配置暗黑模式" tabindex="-1"><a class="header-anchor" href="#css-配置暗黑模式"><span>CSS 配置暗黑模式</span></a></h3><blockquote><p>题目：如何使用 CSS 实现网站的暗黑模式 (Dark Mode)</p></blockquote><ul><li>最简单来讲，可通过媒体查询 <code>@media (prefers-color-scheme: dark) </code>与 CSS 变量实现</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">@media</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (prefers-color-scheme: dark) {</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">  :root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',50))])}]]),t=JSON.parse('{"path":"/knowledge/interview/css/","title":"CSS 面试重点","lang":"zh-CN","frontmatter":{"article":false,"title":"CSS 面试重点","category":["面试"],"tag":["CSS"],"description":"盒模型 题目：简述 CSS 的盒模型 CSS 的盒模型主要包括以下两种，可通过 属性进行配置： content-box：默认属性，width 只包含 content border-box：width 包含 (content、padding、border) CSS specificity (权重) 题目：简述下 css specificity css s...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/interview/css/"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"CSS 面试重点"}],["meta",{"property":"og:description","content":"盒模型 题目：简述 CSS 的盒模型 CSS 的盒模型主要包括以下两种，可通过 属性进行配置： content-box：默认属性，width 只包含 content border-box：width 包含 (content、padding、border) CSS specificity (权重) 题目：简述下 css specificity css s..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-12T03:19:01.000Z"}],["meta",{"property":"article:tag","content":"CSS"}],["meta",{"property":"article:modified_time","content":"2024-12-12T03:19:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"CSS 面试重点\\",\\"description\\":\\"盒模型 题目：简述 CSS 的盒模型 CSS 的盒模型主要包括以下两种，可通过 属性进行配置： content-box：默认属性，width 只包含 content border-box：width 包含 (content、padding、border) CSS specificity (权重) 题目：简述下 css specificity css s...\\"}"]]},"headers":[{"level":3,"title":"盒模型","slug":"盒模型","link":"#盒模型","children":[]},{"level":3,"title":"CSS specificity (权重)","slug":"css-specificity-权重","link":"#css-specificity-权重","children":[]},{"level":3,"title":"+ 与 ~ 选择器有什么不同","slug":"与-选择器有什么不同","link":"#与-选择器有什么不同","children":[]},{"level":3,"title":"z-index 与层叠上下文","slug":"z-index-与层叠上下文","link":"#z-index-与层叠上下文","children":[]},{"level":3,"title":"水平垂直居中","slug":"水平垂直居中","link":"#水平垂直居中","children":[]},{"level":3,"title":"左侧固定、右侧自适应","slug":"左侧固定、右侧自适应","link":"#左侧固定、右侧自适应","children":[]},{"level":3,"title":"三栏均分布局","slug":"三栏均分布局","link":"#三栏均分布局","children":[]},{"level":3,"title":"如何画一个正方形/长宽固定的长方形","slug":"如何画一个正方形-长宽固定的长方形","link":"#如何画一个正方形-长宽固定的长方形","children":[]},{"level":3,"title":"CSS 如何避免样式冲突","slug":"css-如何避免样式冲突","link":"#css-如何避免样式冲突","children":[]},{"level":3,"title":"CSS 变量","slug":"css-变量","link":"#css-变量","children":[]},{"level":3,"title":"CSS 配置暗黑模式","slug":"css-配置暗黑模式","link":"#css-配置暗黑模式","children":[]}],"git":{"createdTime":1732251337000,"updatedTime":1733973541000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":2}]},"readingTime":{"minutes":4.13,"words":1239},"filePathRelative":"knowledge/interview/css/index.md","localizedDate":"2024年11月22日","excerpt":"<h3>盒模型</h3>\\n<blockquote>\\n<p>题目：简述 CSS 的盒模型</p>\\n</blockquote>\\n<ul>\\n<li>CSS 的盒模型主要包括以下两种，可通过 <strong></strong> 属性进行配置：\\n<ul>\\n<li><strong>content-box</strong>：默认属性，width 只包含 content</li>\\n<li><strong>border-box</strong>：width 包含 (content、padding、border)</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);