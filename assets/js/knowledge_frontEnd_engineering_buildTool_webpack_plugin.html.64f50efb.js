"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[3204],{3386:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,l]of s)a[i]=l;return a}},893:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var l=a(6254);const n={},e=(0,a(3386).A)(n,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,s[0]||(s[0]=[(0,l.Fv)('<h2 id="webpack-插件机制" tabindex="-1"><a class="header-anchor" href="#webpack-插件机制"><span>webpack 插件机制</span></a></h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>loader 专注实现资源模块的加载，从而实现整体项目的打包</li><li>plugin 解决项目中除了资源加载以外的自动化工作</li></ul></div><ul><li><p>插件目的是为了增强 webpack 项目自动化能力，例如</p><ol><li>在打包之前，自动清除 dist 目录</li><li>拷贝不需要参与打包的资源文件到输出目录</li><li>压缩打包结果输出的代码</li></ol></li><li><p>webpack + plugin 实现了大多前端工程化的工作，也是很多开发者理解为 webpack 就是前端工程化的原因</p></li></ul><h2 id="webpack-常见插件" tabindex="-1"><a class="header-anchor" href="#webpack-常见插件"><span>webpack 常见插件</span></a></h2><ul><li>clean-webpackl-plugin</li><li>html-webpack-plugin</li><li>copy-webpack-plugin</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>绝大多数插件导出的都是一个模块类(class)，所以使用时就要创建这个插件的示例，并配置到 plugins 属性中</p></div><h3 id="_1-clean-webpack-plugin-自动清理输出目录" tabindex="-1"><a class="header-anchor" href="#_1-clean-webpack-plugin-自动清理输出目录"><span>1. clean-webpack-plugin 自动清理输出目录</span></a></h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>webpack 每次打包的结果都是覆盖到 dist 目录，在打包之前，dist 目录中就可能已经存在一些之前的遗留文件，再次打包，只能覆盖掉那些同名的文件<br> 对于其他已经移除的资源文件就会一直积累在里面，非常不合理，合理的做法就是在每次打包之前，自动清理 dist 目录，这样 dist 目录中就只会存在需要的文件</p></div><ul><li>利用 clean-webpack-plugin 插件能实现清理的功能</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CleanWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;clean-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// ...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tplugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CleanWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-html-webpack-plugin-自动生成-html" tabindex="-1"><a class="header-anchor" href="#_2-html-webpack-plugin-自动生成-html"><span>2. html-webpack-plugin 自动生成 html</span></a></h3><ul><li>目前为止示例都是以硬编码的方式，单独存放在项目根目录下，这个方式有两个问题： <ol><li>项目发布时需要同时发布根目录下的 html 文件和 dist 目录下所有的打包结果，并且上线后，需要人工确认 html 中路径引用都是正确的，相对麻烦</li><li>项目输出(output)的目录或文件名，也就是打包结果的配置，发生了变化，还需要手动去修改 html 中 script 标签的 src</li></ol></li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>解决办法，通过 webpack 输出 html 文件，也就是让 html 也参与到 webpack 的构建过程</p><ol><li>webpack 知道生成了多少 bundle，它会自动将这些打包文件添加到 html 文件中</li><li>webpack 还把 html 文件输出到 dist 目录，这样上线时直接发布 dist 目录即可</li><li>bundle 文件是 webpack 动态的注入到 html 文件中，不需要手动的硬编码，它确保路径的引用是正常的</li></ol></div><ul><li>html-webpack-plugin 默认自动生成一个空白的 index.html 文件到配置的输出目录，并将打包文件(bundle)动态注入到 html 中</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> HtmlWebpackPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认导出的就是一个插件类型，不需要解构内部成员</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// ...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tplugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-html-webpack-plugin-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-html-webpack-plugin-配置"><span>2.1 html-webpack-plugin 配置</span></a></h4><ul><li>通过修改插件的配置属性，对自动生成的 html 文件做一些简单改进，例如： <ol><li>title：配置标题</li><li>meta：自定义元数据标签</li></ol></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// ...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tplugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Webpack Plugin Sample&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      meta</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        viewport</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;width=device-width&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果需要对 html 文件进行大量的自定义，更好的做法是通过配置 template 指定一个 html 模板，让 html-webpack-plugin 插件根据模版生成页面 <ul><li>html 模板默认使用 lodash 语法输出</li><li>htmlWebpackPlugin 是插件内部提供的变量</li></ul></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// ...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tplugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Webpack Plugin Sample&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      meta</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        viewport</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;width=device-width&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.html&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-同时输出多个页面文件" tabindex="-1"><a class="header-anchor" href="#_2-2-同时输出多个页面文件"><span>2.2 同时输出多个页面文件</span></a></h4><ul><li>html-webpack-plugin 默认生成一个 index.html 文件</li><li>同样可以通过创建多个实例，生成多个 html 文件</li><li>通过 filename 指定输出的文件名</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// ...</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tplugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t\t// 用于生成 index.html</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Webpack Plugin Sample&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      meta</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        viewport</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;width=device-width&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.html&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 用于生成 about.html</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;about.html&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\t]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-copy-webpack-plugin-复制静态文件" tabindex="-1"><a class="header-anchor" href="#_3-copy-webpack-plugin-复制静态文件"><span>3. copy-webpack-plugin 复制静态文件</span></a></h3><ul><li>对于项目中不需要参与构建的静态文件，也需要发布到线上，它们一般统一放在项目的 public 目录中</li><li>可以通过 copy-webpack-plugin 插件将它们拷贝到输出目录</li><li>它接收一个文件相对路径或目录组成的数组，路径可以使用通配符</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拷贝文件 v5.x 用法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// new CopyWebpackPlugin([</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// &#39;public/**&#39;,</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // &#39;public&#39;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ])</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拷贝文件 v6.x 使用 patterns 配置</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CopyWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  patterns</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &#39;public/**&#39;</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;public&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件机制的工作原理" tabindex="-1"><a class="header-anchor" href="#插件机制的工作原理"><span>插件机制的工作原理</span></a></h2><blockquote><p>相比于 loader，plugin 拥有更宽的能力范围</p><ul><li>loader 只是在加载模块的环节工作</li><li>plugin 的作用范围几乎可以触及 webpack 工作的每一个环节</li></ul></blockquote><h3 id="_1-钩子机制" tabindex="-1"><a class="header-anchor" href="#_1-钩子机制"><span>1. 钩子机制</span></a></h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这样的插件机制是如何实现的呢？</p><ul><li>webpack 插件机制就是软件开发中常见的钩子机制，有点类似于 web 中的事件</li></ul></div><ul><li>webpack 工作过程中有很多环节，为了便于插件的扩展，webpack 几乎给每一个环节都埋下一个钩子</li><li>在开发插件的时候，可以通过这些不同的节点去挂载不同的任务，来扩展 webpack 的能力</li><li>有哪些预先定义好的钩子，可以参考官网<a href="https://webpack.docschina.org/api/compiler-hooks/" target="_blank" rel="noopener noreferrer">Compiler Hooks</a></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/18.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-如何往钩子上挂载任务" tabindex="-1"><a class="header-anchor" href="#_2-如何往钩子上挂载任务"><span>2. 如何往钩子上挂载任务</span></a></h3><ul><li>webpack 要求插件(在 plugins 中使用时)必须是一个函数或者是一个包含 apply 方法的对象</li></ul><blockquote><p>官方：插件是由[具有 apply 方法的 prototype 对象]所实例化出来的</p></blockquote><div class="hint-container important"><p class="hint-container-title">重要</p><ul><li>一般都会把一个插件定义为一个类(class)，然后在其中定义一个 apply 方法，使用插件时，通过这个 class 构建一个实例</li><li>webpack 在启动时，会自动调用插件的 apply 方法，apply 方法接收一个 compiler 对象作为参数</li><li>compiler 对象是 webpack 工作过程中最核心的对象，它包含当前构建的所有的配置信息，也是通过这个对象来注册钩子函数</li></ul></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">compiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MyPlugin 启动&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-开发一个插件" tabindex="-1"><a class="header-anchor" href="#_3-开发一个插件"><span>3. 开发一个插件</span></a></h3><blockquote><p>自定义一个用于清除 bundle.js 中<code>/******/</code>注释的插件</p></blockquote><ol><li>确认插件执行时机（即挂载到哪个钩子上）</li></ol><ul><li>emit 钩子：确认 bundle.js 内容，在生成到 output 目录之前</li></ul><ol start="2"><li>通过 compiler.hooks 访问到具体的钩子</li><li>通过 tap 方法注册一个钩子函数，它接收两个参数：</li></ol><ul><li>参数1：插件的名称</li><li>参数2：需要挂载到这个钩子上的函数，它接收一个 compilation 对象作为参数 <ul><li>compilation 可以理解为此次打包过程的上下文，此次所有打包过程产生的结果都会放到 compilation 对象中</li><li>compilation.assets 访问所有编译的资源文件，每个元素都是一个包含资源文件信息的对象 <ul><li>key 是资源文件的名称</li><li>value 包含一个 source 方法 <ul><li>调用它可以获取编译文件的内容</li><li>重定义这个方法返回的值，实现修改编译文件的内容</li></ul></li></ul></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>webpack 还要求必须返回一个 size 方法，用于返回编译文件的大小</p></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">compiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    compiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hooks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">compilation</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 打印资源文件的名称</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // console.log(name)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 打印资源文件的内容，通过资源文件的值的source方法获取</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // onsole.log(compilation.assets[name].source())</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 判断是否是js文件</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">endsWith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 获取内容</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> contents</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> compilation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 清除/*[*+]*/注释</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> withoutComments</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> contents</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\/\\*\\*</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">+</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\*\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          // 覆盖编译内容</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">          compilation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            source</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> withoutComments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            size</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> withoutComments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 必要属性</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. 总结</span></a></h3><ul><li>插件是通过往 webpack 的生命周期里的钩子函数里挂载任务函数实现的扩展</li><li>在插件开发中最重要的两个资源就是 compiler 和 compilation 对象，理解它们的角色是扩展 webpack 引擎重要的第一步 <ul><li>compiler 对象代表了完整的 webpack 环境配置 <ul><li>这个对象在 webpack 启动时一次性建立，并配置好所有可操作的设置</li><li>当在 webpack 环境中应用一个插件时，插件将受到此 compiler 对象的引用</li><li>可以使用它来访问 webpack 的主环境</li></ul></li><li>compilation 对象代表了一次资源版本构建 <ul><li>当运行 webpack 开发环境中间件时，每检测到一个文件变化，就会创建一个新的 compilation，从而生成一组新的编译资源</li><li>一个 compilation 对象表现了当前模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息</li><li>compilation 也提供了很多关键时机的回调，供插件做自定义处理时选择使用</li></ul></li></ul></li></ul>',47)]))}]]),t=JSON.parse('{"path":"/knowledge/frontEnd/engineering/buildTool/webpack/plugin.html","title":"plugin 插件机制","lang":"zh-CN","frontmatter":{"title":"plugin 插件机制","star":true,"order":3,"description":"webpack 插件机制 相关信息 loader 专注实现资源模块的加载，从而实现整体项目的打包 plugin 解决项目中除了资源加载以外的自动化工作 插件目的是为了增强 webpack 项目自动化能力，例如 在打包之前，自动清除 dist 目录 拷贝不需要参与打包的资源文件到输出目录 压缩打包结果输出的代码 webpack + plugin 实现了大...","head":[["meta",{"property":"og:url","content":"https://www.zxwin0125.top/knowledge/frontEnd/engineering/buildTool/webpack/plugin.html"}],["meta",{"property":"og:site_name","content":"欢迎来到三金的Blog！"}],["meta",{"property":"og:title","content":"plugin 插件机制"}],["meta",{"property":"og:description","content":"webpack 插件机制 相关信息 loader 专注实现资源模块的加载，从而实现整体项目的打包 plugin 解决项目中除了资源加载以外的自动化工作 插件目的是为了增强 webpack 项目自动化能力，例如 在打包之前，自动清除 dist 目录 拷贝不需要参与打包的资源文件到输出目录 压缩打包结果输出的代码 webpack + plugin 实现了大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/18.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-17T12:36:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-17T12:36:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"plugin 插件机制\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zxwin0125/image-repo/img/Engineering/Webpack/18.png\\"],\\"dateModified\\":\\"2025-01-17T12:36:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"三金\\",\\"url\\":\\"https://www.zxwin0125.top\\"}]}"]]},"headers":[{"level":2,"title":"webpack 插件机制","slug":"webpack-插件机制","link":"#webpack-插件机制","children":[]},{"level":2,"title":"webpack 常见插件","slug":"webpack-常见插件","link":"#webpack-常见插件","children":[{"level":3,"title":"1. clean-webpack-plugin 自动清理输出目录","slug":"_1-clean-webpack-plugin-自动清理输出目录","link":"#_1-clean-webpack-plugin-自动清理输出目录","children":[]},{"level":3,"title":"2. html-webpack-plugin 自动生成 html","slug":"_2-html-webpack-plugin-自动生成-html","link":"#_2-html-webpack-plugin-自动生成-html","children":[]},{"level":3,"title":"3. copy-webpack-plugin 复制静态文件","slug":"_3-copy-webpack-plugin-复制静态文件","link":"#_3-copy-webpack-plugin-复制静态文件","children":[]}]},{"level":2,"title":"插件机制的工作原理","slug":"插件机制的工作原理","link":"#插件机制的工作原理","children":[{"level":3,"title":"1. 钩子机制","slug":"_1-钩子机制","link":"#_1-钩子机制","children":[]},{"level":3,"title":"2. 如何往钩子上挂载任务","slug":"_2-如何往钩子上挂载任务","link":"#_2-如何往钩子上挂载任务","children":[]},{"level":3,"title":"3. 开发一个插件","slug":"_3-开发一个插件","link":"#_3-开发一个插件","children":[]},{"level":3,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}]}],"git":{"createdTime":1737117365000,"updatedTime":1737117365000,"contributors":[{"name":"zxwin0125","email":"zxwin_0125@163.com","commits":1}]},"readingTime":{"minutes":7.14,"words":2142},"filePathRelative":"knowledge/frontEnd/engineering/buildTool/webpack/plugin.md","localizedDate":"2025年1月17日","excerpt":"<h2>webpack 插件机制</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<ul>\\n<li>loader 专注实现资源模块的加载，从而实现整体项目的打包</li>\\n<li>plugin 解决项目中除了资源加载以外的自动化工作</li>\\n</ul>\\n</div>","autoDesc":true}')}}]);